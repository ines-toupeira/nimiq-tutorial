---
url: /build/web-client/reference/globals.md
---
# @nimiq/core

## Namespaces

* [MnemonicUtils](@nimiq/namespaces/MnemonicUtils/index.md)
* [Secret](@nimiq/namespaces/Secret/index.md)

## Enumerations

* [AccountType](enumerations/AccountType.md)
* [TransactionFlag](enumerations/TransactionFlag.md)
* [TransactionFormat](enumerations/TransactionFormat.md)

## Classes

* [Address](classes/Address.md)
* [ArrayUtils](classes/ArrayUtils.md)
* [BLSKeyPair](classes/BLSKeyPair.md)
* [BLSPublicKey](classes/BLSPublicKey.md)
* [BLSSecretKey](classes/BLSSecretKey.md)
* [BufferUtils](classes/BufferUtils.md)
* [Client](classes/Client.md)
* [ClientConfiguration](classes/ClientConfiguration.md)
* [Commitment](classes/Commitment.md)
* [CommitmentPair](classes/CommitmentPair.md)
* [CryptoUtils](classes/CryptoUtils.md)
* [Entropy](classes/Entropy.md)
* [ES256PublicKey](classes/ES256PublicKey.md)
* [ES256Signature](classes/ES256Signature.md)
* [ExtendedPrivateKey](classes/ExtendedPrivateKey.md)
* [Hash](classes/Hash.md)
* [HashedTimeLockedContract](classes/HashedTimeLockedContract.md)
* [KeyPair](classes/KeyPair.md)
* [MerkleTree](classes/MerkleTree.md)
* [MnemonicUtils](classes/MnemonicUtils.md)
* [NumberUtils](classes/NumberUtils.md)
* [PartialSignature](classes/PartialSignature.md)
* [Policy](classes/Policy.md)
* [PrivateKey](classes/PrivateKey.md)
* [PublicKey](classes/PublicKey.md)
* [RandomSecret](classes/RandomSecret.md)
* [Secret](classes/Secret.md)
* [SerialBuffer](classes/SerialBuffer.md)
* [Signature](classes/Signature.md)
* [SignatureProof](classes/SignatureProof.md)
* [StakingContract](classes/StakingContract.md)
* [StringUtils](classes/StringUtils.md)
* [Transaction](classes/Transaction.md)
* [TransactionBuilder](classes/TransactionBuilder.md)
* [VestingContract](classes/VestingContract.md)

## Interfaces

* [InitOutput](interfaces/InitOutput.md)
* [PlainAddStakeData](interfaces/PlainAddStakeData.md)
* [PlainBasicAccount](interfaces/PlainBasicAccount.md)
* [PlainBlockCommonFields](interfaces/PlainBlockCommonFields.md)
* [PlainClientConfiguration](interfaces/PlainClientConfiguration.md)
* [PlainCreateStakerData](interfaces/PlainCreateStakerData.md)
* [PlainCreateValidatorData](interfaces/PlainCreateValidatorData.md)
* [PlainHtlcContract](interfaces/PlainHtlcContract.md)
* [PlainHtlcData](interfaces/PlainHtlcData.md)
* [PlainHtlcEarlyResolveProof](interfaces/PlainHtlcEarlyResolveProof.md)
* [PlainHtlcRegularTransferProof](interfaces/PlainHtlcRegularTransferProof.md)
* [PlainHtlcTimeoutResolveProof](interfaces/PlainHtlcTimeoutResolveProof.md)
* [PlainMacroBlock](interfaces/PlainMacroBlock.md)
* [PlainMicroBlock](interfaces/PlainMicroBlock.md)
* [PlainPeerInfo](interfaces/PlainPeerInfo.md)
* [PlainRawData](interfaces/PlainRawData.md)
* [PlainRawProof](interfaces/PlainRawProof.md)
* [PlainRetireStakeData](interfaces/PlainRetireStakeData.md)
* [PlainSetActiveStakeData](interfaces/PlainSetActiveStakeData.md)
* [PlainStaker](interfaces/PlainStaker.md)
* [PlainStakingContract](interfaces/PlainStakingContract.md)
* [PlainStandardProof](interfaces/PlainStandardProof.md)
* [PlainTransaction](interfaces/PlainTransaction.md)
* [PlainTransactionDetails](interfaces/PlainTransactionDetails.md)
* [PlainTransactionReceipt](interfaces/PlainTransactionReceipt.md)
* [PlainUpdateStakerData](interfaces/PlainUpdateStakerData.md)
* [PlainUpdateValidatorData](interfaces/PlainUpdateValidatorData.md)
* [PlainValidator](interfaces/PlainValidator.md)
* [PlainValidatorData](interfaces/PlainValidatorData.md)
* [PlainVestingContract](interfaces/PlainVestingContract.md)
* [PlainVestingData](interfaces/PlainVestingData.md)

## Type Aliases

* [ConsensusState](type-aliases/ConsensusState.md)
* [InitInput](type-aliases/InitInput.md)
* [PlainAccount](type-aliases/PlainAccount.md)
* [PlainBlock](type-aliases/PlainBlock.md)
* [PlainService](type-aliases/PlainService.md)
* [PlainTransactionProof](type-aliases/PlainTransactionProof.md)
* [PlainTransactionRecipientData](type-aliases/PlainTransactionRecipientData.md)
* [PlainTransactionSenderData](type-aliases/PlainTransactionSenderData.md)
* [SyncInitInput](type-aliases/SyncInitInput.md)
* [TransactionState](type-aliases/TransactionState.md)

## Functions

* [default](functions/default.md)
* [initSync](functions/initSync.md)

---

---
url: /build/web-client/reference/classes/Secret.md
---
[@nimiq/core](../globals.md) / Secret

# Class: `abstract` Secret

Defined in: @nimiq/core/lib/index.d.ts:175

## Extends

* `Serializable`

## Extended by

* [`Entropy`](Entropy.md)

## Constructors

### Constructor

> **new Secret**(`type`, `purposeId`): `Secret`

Defined in: @nimiq/core/lib/index.d.ts:183

#### Parameters

##### type

[`Type`](../@nimiq/namespaces/Secret/enumerations/Type.md)

##### purposeId

`number`

#### Returns

`Secret`

#### Overrides

`Serializable.constructor`

## Properties

### ENCRYPTION\_CHECKSUM\_SIZE

> `static` **ENCRYPTION\_CHECKSUM\_SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:181

***

### ENCRYPTION\_CHECKSUM\_SIZE\_V3

> `static` **ENCRYPTION\_CHECKSUM\_SIZE\_V3**: `number`

Defined in: @nimiq/core/lib/index.d.ts:182

***

### ENCRYPTION\_KDF\_ROUNDS

> `static` **ENCRYPTION\_KDF\_ROUNDS**: `number`

Defined in: @nimiq/core/lib/index.d.ts:180

***

### ENCRYPTION\_SALT\_SIZE

> `static` **ENCRYPTION\_SALT\_SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:179

***

### SIZE

> `static` **SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:178

## Accessors

### encryptedSize

#### Get Signature

> **get** **encryptedSize**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:196

Returns the serialized size of this object when encrypted.

##### Returns

`number`

## Methods

### compare()

> **compare**(`o`): `number`

Defined in: @nimiq/core/lib/index.d.ts:97

Compares this object to another object.

Returns a negative number if `this` is smaller than o, a positive number if `this` is larger than o, and zero if equal.

#### Parameters

##### o

`Serializable`

#### Returns

`number`

#### Inherited from

`Serializable.compare`

***

### equals()

> **equals**(`o`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:91

Checks for equality with another Serializable.

#### Parameters

##### o

`unknown`

#### Returns

`boolean`

#### Inherited from

`Serializable.equals`

***

### exportEncrypted()

> **exportEncrypted**(`key`): `Promise`<[`SerialBuffer`](SerialBuffer.md)>

Defined in: @nimiq/core/lib/index.d.ts:192

Encrypts the Secret with a password.

#### Parameters

##### key

`Uint8Array`

#### Returns

`Promise`<[`SerialBuffer`](SerialBuffer.md)>

***

### serialize()

> `abstract` **serialize**(`buf?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:98

#### Parameters

##### buf?

[`SerialBuffer`](SerialBuffer.md)

#### Returns

[`SerialBuffer`](SerialBuffer.md)

#### Inherited from

`Serializable.serialize`

***

### toBase64()

> **toBase64**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:106

Formats the object into a base64 string.

#### Returns

`string`

#### Inherited from

`Serializable.toBase64`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:110

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

`Serializable.toHex`

***

### toString()

> **toString**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:102

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

`Serializable.toString`

***

### exportEncrypted()

> `static` **exportEncrypted**(`secret`, `key`): `Promise`<[`SerialBuffer`](SerialBuffer.md)>

Defined in: @nimiq/core/lib/index.d.ts:188

#### Parameters

##### secret

`Secret` | `PrivateKey`

##### key

`Uint8Array`

#### Returns

`Promise`<[`SerialBuffer`](SerialBuffer.md)>

***

### fromEncrypted()

> `static` **fromEncrypted**(`buf`, `key`): `Promise`<[`Entropy`](Entropy.md) | `PrivateKey`>

Defined in: @nimiq/core/lib/index.d.ts:187

Decrypts a Secret from an encrypted byte array and its password.

#### Parameters

##### buf

[`SerialBuffer`](SerialBuffer.md)

##### key

`Uint8Array`

#### Returns

`Promise`<[`Entropy`](Entropy.md) | `PrivateKey`>

---

---
url: /build/web-client/reference/classes/Address.md
---
[@nimiq/core](../globals.md) / Address

# Class: Address

Defined in: @nimiq/core/types/wasm/web.d.ts:617

An object representing a Nimiq address.
Offers methods to parse and format addresses from and to strings.

## Constructors

### Constructor

> **new Address**(`bytes`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:620

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Address`

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:619

#### Returns

`string`

***

### compare()

> **compare**(`other`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:673

Compares this address to the other address.

Returns -1 if this address is smaller than the other address, 0 if they are equal,
and 1 if this address is larger than the other address.

#### Parameters

##### other

`Address`

#### Returns

`number`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:666

Returns if this address is equal to the other address.

#### Parameters

##### other

`Address`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:618

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:662

Returns the byte representation of the address.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:658

Formats the address into hex format.

#### Returns

`string`

***

### toPlain()

> **toPlain**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:650

Formats the address into a plain string format.

#### Returns

`string`

***

### toUserFriendlyAddress()

> **toUserFriendlyAddress**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:654

Formats the address into user-friendly IBAN format.

#### Returns

`string`

***

### deserialize()

> `static` **deserialize**(`bytes`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:624

Deserializes an address from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Address`

***

### fromAny()

> `static` **fromAny**(`addr`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:630

Parses an address from an Address instance, a hex string representation, or a byte array.

Throws when an address cannot be parsed from the argument.

#### Parameters

##### addr

`string` | `Address` | `Uint8Array`

#### Returns

`Address`

***

### fromPublicKeys()

> `static` **fromPublicKeys**(`public_keys`, `num_signers`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:646

Computes the multisig address of a list of signer public keys.

#### Parameters

##### public\_keys

(`string` | `Uint8Array` | [`PublicKey`](PublicKey.md))\[]

##### num\_signers

`number`

#### Returns

`Address`

***

### fromString()

> `static` **fromString**(`str`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:636

Parses an address from a string representation, either user-friendly or hex format.

Throws when an address cannot be parsed from the string.

#### Parameters

##### str

`string`

#### Returns

`Address`

***

### fromUserFriendlyAddress()

> `static` **fromUserFriendlyAddress**(`str`): `Address`

Defined in: @nimiq/core/types/wasm/web.d.ts:642

Parses an address from its user-friendly string representation.

Throws when an address cannot be parsed from the string.

#### Parameters

##### str

`string`

#### Returns

`Address`

---

---
url: /build/web-client/reference/classes/ArrayUtils.md
---
[@nimiq/core](../globals.md) / ArrayUtils

# Class: ArrayUtils

Defined in: @nimiq/core/lib/index.d.ts:3

## Constructors

### Constructor

> **new ArrayUtils**(): `ArrayUtils`

#### Returns

`ArrayUtils`

## Methods

### subarray()

> `static` **subarray**(`uintarr`, `begin?`, `end?`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:4

#### Parameters

##### uintarr

`Uint8Array`

##### begin?

`number`

##### end?

`number`

#### Returns

`Uint8Array`

---

---
url: /build/web-client/reference/classes/BLSKeyPair.md
---
[@nimiq/core](../globals.md) / BLSKeyPair

# Class: BLSKeyPair

Defined in: @nimiq/core/types/wasm/web.d.ts:680

A BLS keypair
It is used by validators to vote during Tendermint rounds.
This is just a wrapper around our internal BLS structs

## Constructors

### Constructor

> **new BLSKeyPair**(`secret_key`, `public_key`): `BLSKeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:694

#### Parameters

##### secret\_key

[`BLSSecretKey`](BLSSecretKey.md)

##### public\_key

[`BLSPublicKey`](BLSPublicKey.md)

#### Returns

`BLSKeyPair`

## Properties

### publicKey

> `readonly` **publicKey**: [`BLSPublicKey`](BLSPublicKey.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:710

Gets the keypair's public key.

***

### secretKey

> `readonly` **secretKey**: [`BLSSecretKey`](BLSSecretKey.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:706

Gets the keypair's secret key.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:681

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:698

Serializes to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:702

Formats the keypair into a hex string.

#### Returns

`string`

***

### derive()

> `static` **derive**(`private_key`): `BLSKeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:689

Derives a keypair from an existing private key.

#### Parameters

##### private\_key

[`BLSSecretKey`](BLSSecretKey.md)

#### Returns

`BLSKeyPair`

***

### deserialize()

> `static` **deserialize**(`bytes`): `BLSKeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:693

Deserializes a keypair from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`BLSKeyPair`

***

### generate()

> `static` **generate**(): `BLSKeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:685

Generates a new keypair from secure randomness.

#### Returns

`BLSKeyPair`

---

---
url: /build/web-client/reference/classes/BLSPublicKey.md
---
[@nimiq/core](../globals.md) / BLSPublicKey

# Class: BLSPublicKey

Defined in: @nimiq/core/types/wasm/web.d.ts:716

The public part of the BLS keypair.
This is specified in the staking contract to verify votes from Validators.

## Constructors

### Constructor

> **new BLSPublicKey**(`bytes`): `BLSPublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:729

Creates a new public key from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`BLSPublicKey`

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:717

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:733

Serializes the public key to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:741

Formats the public key into a hex string.

#### Returns

`string`

***

### derive()

> `static` **derive**(`secret_key`): `BLSPublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:721

Derives a public key from an existing private key.

#### Parameters

##### secret\_key

[`BLSSecretKey`](BLSSecretKey.md)

#### Returns

`BLSPublicKey`

***

### deserialize()

> `static` **deserialize**(`bytes`): `BLSPublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:725

Deserializes a public key from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`BLSPublicKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `BLSPublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:737

Parses a public key from its hex representation.

#### Parameters

##### hex

`string`

#### Returns

`BLSPublicKey`

---

---
url: /build/web-client/reference/classes/BLSSecretKey.md
---
[@nimiq/core](../globals.md) / BLSSecretKey

# Class: BLSSecretKey

Defined in: @nimiq/core/types/wasm/web.d.ts:747

The secret part of the BLS keypair.
This is specified in the config file, and is used by Validators to vote.

## Constructors

### Constructor

> **new BLSSecretKey**(`bytes`): `BLSSecretKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:760

Creates a new private key from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`BLSSecretKey`

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:748

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:764

Serializes the private key to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:772

Formats the private key into a hex string.

#### Returns

`string`

***

### deserialize()

> `static` **deserialize**(`bytes`): `BLSSecretKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:756

Deserializes a private key from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`BLSSecretKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `BLSSecretKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:768

Parses a private key from its hex representation.

#### Parameters

##### hex

`string`

#### Returns

`BLSSecretKey`

***

### generate()

> `static` **generate**(): `BLSSecretKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:752

Generates a new private key from secure randomness.

#### Returns

`BLSSecretKey`

---

---
url: /build/web-client/reference/classes/BufferUtils.md
---
[@nimiq/core](../globals.md) / BufferUtils

# Class: BufferUtils

Defined in: @nimiq/core/lib/index.d.ts:48

## Constructors

### Constructor

> **new BufferUtils**(): `BufferUtils`

#### Returns

`BufferUtils`

## Properties

### \_BASE64\_LOOKUP

> `static` **\_BASE64\_LOOKUP**: `string`\[]

Defined in: @nimiq/core/lib/index.d.ts:56

***

### BASE32\_ALPHABET

> `static` **BASE32\_ALPHABET**: `object`

Defined in: @nimiq/core/lib/index.d.ts:50

#### NIMIQ

> **NIMIQ**: `string`

#### RFC4648

> **RFC4648**: `string`

#### RFC4648\_HEX

> **RFC4648\_HEX**: `string`

***

### BASE64\_ALPHABET

> `static` **BASE64\_ALPHABET**: `string`

Defined in: @nimiq/core/lib/index.d.ts:49

***

### HEX\_ALPHABET

> `static` **HEX\_ALPHABET**: `string`

Defined in: @nimiq/core/lib/index.d.ts:55

## Methods

### \_base64encodeChunk()

> `static` **\_base64encodeChunk**(`u8`, `start`, `end`): `string`

Defined in: @nimiq/core/lib/index.d.ts:62

#### Parameters

##### u8

`Uint8Array`

##### start

`number`

##### end

`number`

#### Returns

`string`

***

### \_base64fromByteArray()

> `static` **\_base64fromByteArray**(`u8`): `string`

Defined in: @nimiq/core/lib/index.d.ts:63

#### Parameters

##### u8

`Uint8Array`

#### Returns

`string`

***

### \_codePointTextDecoder()

> `static` **\_codePointTextDecoder**(`buffer`): `string`

Defined in: @nimiq/core/lib/index.d.ts:60

#### Parameters

##### buffer

`Uint8Array`

#### Returns

`string`

***

### \_tripletToBase64()

> `static` **\_tripletToBase64**(`num`): `string`

Defined in: @nimiq/core/lib/index.d.ts:61

#### Parameters

##### num

`number`

#### Returns

`string`

***

### compare()

> `static` **compare**(`a`, `b`): `number`

Defined in: @nimiq/core/lib/index.d.ts:82

Returns -1 if a is smaller than b, 1 if a is larger than b, 0 if a equals b.
Shorter arrays are always considered smaller than longer ones.

#### Parameters

##### a

`TypedArray`

##### b

`TypedArray`

#### Returns

`number`

***

### equals()

> `static` **equals**(`a`, `b`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:77

#### Parameters

##### a

`TypedArray`

##### b

`TypedArray`

#### Returns

`boolean`

***

### fromAny()

> `static` **fromAny**(`o`, `length?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:76

#### Parameters

##### o

`string` | `Uint8Array`

##### length?

`number`

#### Returns

[`SerialBuffer`](SerialBuffer.md)

***

### fromBase32()

> `static` **fromBase32**(`base32`, `alphabet?`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:69

#### Parameters

##### base32

`string`

##### alphabet?

`string`

#### Returns

`Uint8Array`

***

### fromBase64()

> `static` **fromBase64**(`base64`, `length?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:65

#### Parameters

##### base64

`string`

##### length?

`number`

#### Returns

[`SerialBuffer`](SerialBuffer.md)

***

### fromBase64Url()

> `static` **fromBase64Url**(`base64`, `length?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:67

#### Parameters

##### base64

`string`

##### length?

`number`

#### Returns

[`SerialBuffer`](SerialBuffer.md)

***

### fromHex()

> `static` **fromHex**(`hex`, `length?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:71

#### Parameters

##### hex

`string`

##### length?

`number`

#### Returns

[`SerialBuffer`](SerialBuffer.md)

***

### fromUtf8()

> `static` **fromUtf8**(`str`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:73

#### Parameters

##### str

`string`

#### Returns

`Uint8Array`

***

### toBase32()

> `static` **toBase32**(`buf`, `alphabet?`): `string`

Defined in: @nimiq/core/lib/index.d.ts:68

#### Parameters

##### buf

`Uint8Array`

##### alphabet?

`string`

#### Returns

`string`

***

### toBase64()

> `static` **toBase64**(`buffer`): `string`

Defined in: @nimiq/core/lib/index.d.ts:64

#### Parameters

##### buffer

`Uint8Array`

#### Returns

`string`

***

### toBase64Url()

> `static` **toBase64Url**(`buffer`): `string`

Defined in: @nimiq/core/lib/index.d.ts:66

#### Parameters

##### buffer

`Uint8Array`

#### Returns

`string`

***

### toHex()

> `static` **toHex**(`buffer`): `string`

Defined in: @nimiq/core/lib/index.d.ts:70

#### Parameters

##### buffer

`Uint8Array`

#### Returns

`string`

***

### toUtf8()

> `static` **toUtf8**(`buf`): `string`

Defined in: @nimiq/core/lib/index.d.ts:75

#### Parameters

##### buf

`TypedArray`

#### Returns

`string`

***

### xor()

> `static` **xor**(`a`, `b`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:83

#### Parameters

##### a

`Uint8Array`

##### b

`Uint8Array`

#### Returns

`Uint8Array`

---

---
url: /build/web-client/reference/classes/Client.md
---
[@nimiq/core](../globals.md) / Client

# Class: Client

Defined in: @nimiq/core/types/wasm/web.d.ts:789

Nimiq Albatross client that runs in browsers via WASM and is exposed to Javascript.

### Usage:

```js
import init, * as Nimiq from "./pkg/nimiq_web_client.js";

init().then(async () => {
    const config = new Nimiq.ClientConfiguration();
    const client = await config.instantiateClient();
    // ...
});
```

## Methods

### addConsensusChangedListener()

> **addConsensusChangedListener**(`listener`): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:799

Adds an event listener for consensus-change events, such as when consensus is established or lost.

#### Parameters

##### listener

(`state`) => `any`

#### Returns

`Promise`<`number`>

***

### addHeadChangedListener()

> **addHeadChangedListener**(`listener`): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:803

Adds an event listener for new blocks added to the blockchain.

#### Parameters

##### listener

(`hash`, `reason`, `reverted_blocks`, `adopted_blocks`) => `any`

#### Returns

`Promise`<`number`>

***

### addPeerChangedListener()

> **addPeerChangedListener**(`listener`): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:807

Adds an event listener for peer-change events, such as when a new peer joins, or a peer leaves.

#### Parameters

##### listener

(`peer_id`, `reason`, `peer_count`, `peer_info?`) => `any`

#### Returns

`Promise`<`number`>

***

### addTransactionListener()

> **addTransactionListener**(`listener`, `addresses`): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:813

Adds an event listener for transactions to and from the provided addresses.

The listener is called for transactions when they are *included* in the blockchain.

#### Parameters

##### listener

(`transaction`) => `any`

##### addresses

(`string` | [`Address`](Address.md) | `Uint8Array`)\[]

#### Returns

`Promise`<`number`>

***

### connectNetwork()

> **connectNetwork**(): `Promise`<`void`>

Defined in: @nimiq/core/types/wasm/web.d.ts:960

This function is used to tell the network to (re)start connecting to peers.
This is could be used to tell the network to restart connection operations after
disconnect network is called.

#### Returns

`Promise`<`void`>

***

### disconnectNetwork()

> **disconnectNetwork**(): `Promise`<`void`>

Defined in: @nimiq/core/types/wasm/web.d.ts:954

This function is used to tell the network to disconnect from every connected
peer and stop trying to connect to other peers.

**Important**: this function returns when the signal to disconnect was sent,
before all peers actually disconnect. This means that in order to ensure the
network is disconnected, wait for all peers to disappear after calling.

#### Returns

`Promise`<`void`>

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:791

#### Returns

`void`

***

### getAccount()

> **getAccount**(`address`): `Promise`<[`PlainAccount`](../type-aliases/PlainAccount.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:871

Fetches the account for the provided address from the network.

Throws if the address cannot be parsed and on network errors.

#### Parameters

##### address

`string` | [`Address`](Address.md) | `Uint8Array`

#### Returns

`Promise`<[`PlainAccount`](../type-aliases/PlainAccount.md)>

***

### getAccounts()

> **getAccounts**(`addresses`): `Promise`<[`PlainAccount`](../type-aliases/PlainAccount.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:877

Fetches the accounts for the provided addresses from the network.

Throws if an address cannot be parsed and on network errors.

#### Parameters

##### addresses

(`string` | [`Address`](Address.md) | `Uint8Array`)\[]

#### Returns

`Promise`<[`PlainAccount`](../type-aliases/PlainAccount.md)\[]>

***

### getAddressBook()

> **getAddressBook**(): `Promise`<[`PlainPeerInfo`](../interfaces/PlainPeerInfo.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:849

Returns the current address books peers.
Each peer will have one address and currently no guarantee for the usefulness of that address can be given.

The resulting Array may be empty if there is no peers in the address book.

#### Returns

`Promise`<[`PlainPeerInfo`](../interfaces/PlainPeerInfo.md)\[]>

***

### getBlock()

> **getBlock**(`hash`): `Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:857

Fetches a block by its hash.

Throws if the client does not have the block.

Fetching blocks from the network is not yet available.

#### Parameters

##### hash

`string`

#### Returns

`Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

***

### getBlockAt()

> **getBlockAt**(`height`): `Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:865

Fetches a block by its height (block number).

Throws if the client does not have the block.

Fetching blocks from the network is not yet available.

#### Parameters

##### height

`number`

#### Returns

`Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

***

### getHeadBlock()

> **getHeadBlock**(): `Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:842

Returns the current blockchain head block.
Note that the web client is a light client and does not have block bodies, i.e. no transactions.

#### Returns

`Promise`<[`PlainBlock`](../type-aliases/PlainBlock.md)>

***

### getHeadHash()

> **getHeadHash**(): `Promise`<`string`>

Defined in: @nimiq/core/types/wasm/web.d.ts:833

Returns the block hash of the current blockchain head.

#### Returns

`Promise`<`string`>

***

### getHeadHeight()

> **getHeadHeight**(): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:837

Returns the block number of the current blockchain head.

#### Returns

`Promise`<`number`>

***

### getNetworkId()

> **getNetworkId**(): `Promise`<`number`>

Defined in: @nimiq/core/types/wasm/web.d.ts:821

Returns the network ID that the client is connecting to.

#### Returns

`Promise`<`number`>

***

### getStaker()

> **getStaker**(`address`): `Promise`<[`PlainStaker`](../interfaces/PlainStaker.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:883

Fetches the staker for the provided address from the network.

Throws if the address cannot be parsed and on network errors.

#### Parameters

##### address

`string` | [`Address`](Address.md) | `Uint8Array`

#### Returns

`Promise`<[`PlainStaker`](../interfaces/PlainStaker.md)>

***

### getStakers()

> **getStakers**(`addresses`): `Promise`<[`PlainStaker`](../interfaces/PlainStaker.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:889

Fetches the stakers for the provided addresses from the network.

Throws if an address cannot be parsed and on network errors.

#### Parameters

##### addresses

(`string` | [`Address`](Address.md) | `Uint8Array`)\[]

#### Returns

`Promise`<[`PlainStaker`](../interfaces/PlainStaker.md)\[]>

***

### getTransaction()

> **getTransaction**(`hash`): `Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:911

Fetches the transaction details for the given transaction hash.

#### Parameters

##### hash

`string`

#### Returns

`Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)>

***

### getTransactionReceiptsByAddress()

> **getTransactionReceiptsByAddress**(`address`, `limit?`, `start_at?`, `min_peers?`): `Promise`<[`PlainTransactionReceipt`](../interfaces/PlainTransactionReceipt.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:923

This function is used to query the network for transaction receipts from and to a
specific address, that have been included in the chain.

The obtained receipts are *not* verified before being returned.

Up to a `limit` number of transaction receipts are returned from newest to oldest.
It starts at the `start_at` transaction and goes backwards. If this hash does not exist
or does not belong to the address, an empty list is returned.
If the network does not have at least `min_peers` to query, then an error is returned.

#### Parameters

##### address

`string` | [`Address`](Address.md) | `Uint8Array`

##### limit?

`number`

##### start\_at?

`string`

##### min\_peers?

`number`

#### Returns

`Promise`<[`PlainTransactionReceipt`](../interfaces/PlainTransactionReceipt.md)\[]>

***

### getTransactionsByAddress()

> **getTransactionsByAddress**(`address`, `since_block_height?`, `known_transaction_details?`, `start_at?`, `limit?`, `min_peers?`): `Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:945

This function is used to query the network for transactions from and to a specific
address, that have been included in the chain.

The obtained transactions are verified before being returned.

If you already have transactions belonging to this address, you can provide some of that
information to reduce the amount of network requests made:

* Provide the `since_block_height` parameter to exclude any history from before
  that block height. You should be completely certain about its state. This should not be
  the last known block height, but an earlier block height that could not have been forked
  from (e.g. the last known election or checkpoint block).
* Provide a list of `known_transaction_details` to have them verified and/or broadcasted
  again.
* Provide a `start_at` parameter to start the query at a specific transaction hash
  (which will not be included). This hash must exist and the corresponding transaction
  must involve this address for the query to work correctly.

Up to a `limit` number of transactions are returned from newest to oldest.
If the network does not have at least `min_peers` to query, an error is returned.

#### Parameters

##### address

`string` | [`Address`](Address.md) | `Uint8Array`

##### since\_block\_height?

`number`

##### known\_transaction\_details?

[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)\[]

##### start\_at?

`string`

##### limit?

`number`

##### min\_peers?

`number`

#### Returns

`Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)\[]>

***

### getValidator()

> **getValidator**(`address`): `Promise`<[`PlainValidator`](../interfaces/PlainValidator.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:895

Fetches the validator for the provided address from the network.

Throws if the address cannot be parsed and on network errors.

#### Parameters

##### address

`string` | [`Address`](Address.md) | `Uint8Array`

#### Returns

`Promise`<[`PlainValidator`](../interfaces/PlainValidator.md)>

***

### getValidators()

> **getValidators**(`addresses`): `Promise`<[`PlainValidator`](../interfaces/PlainValidator.md)\[]>

Defined in: @nimiq/core/types/wasm/web.d.ts:901

Fetches the validators for the provided addresses from the network.

Throws if an address cannot be parsed and on network errors.

#### Parameters

##### addresses

(`string` | [`Address`](Address.md) | `Uint8Array`)\[]

#### Returns

`Promise`<[`PlainValidator`](../interfaces/PlainValidator.md)\[]>

***

### isConsensusEstablished()

> **isConsensusEstablished**(): `Promise`<`boolean`>

Defined in: @nimiq/core/types/wasm/web.d.ts:825

Returns if the client currently has consensus with the network.

#### Returns

`Promise`<`boolean`>

***

### removeListener()

> **removeListener**(`handle`): `Promise`<`void`>

Defined in: @nimiq/core/types/wasm/web.d.ts:817

Removes an event listener by its handle.

#### Parameters

##### handle

`number`

#### Returns

`Promise`<`void`>

***

### sendTransaction()

> **sendTransaction**(`transaction`): `Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:907

Sends a transaction to the network and returns [PlainTransactionDetails](../interfaces/PlainTransactionDetails.md).

Throws in case of network errors.

#### Parameters

##### transaction

`string` | [`PlainTransaction`](../interfaces/PlainTransaction.md) | `Uint8Array` | [`Transaction`](Transaction.md)

#### Returns

`Promise`<[`PlainTransactionDetails`](../interfaces/PlainTransactionDetails.md)>

***

### waitForConsensusEstablished()

> **waitForConsensusEstablished**(): `Promise`<`void`>

Defined in: @nimiq/core/types/wasm/web.d.ts:829

Returns a promise that resolves when the client has established consensus with the network.

#### Returns

`Promise`<`void`>

***

### create()

> `static` **create**(`config`): `Promise`<`Client`>

Defined in: @nimiq/core/types/wasm/web.d.ts:795

Creates a new Client that automatically starts connecting to the network.

#### Parameters

##### config

[`PlainClientConfiguration`](../interfaces/PlainClientConfiguration.md)

#### Returns

`Promise`<`Client`>

---

---
url: /build/web-client/reference/classes/ClientConfiguration.md
---
[@nimiq/core](../globals.md) / ClientConfiguration

# Class: ClientConfiguration

Defined in: @nimiq/core/types/wasm/web.d.ts:967

Use this to provide initialization-time configuration to the Client.
This is a simplified version of the configuration that is used for regular nodes,
since not all configuration knobs are available when running inside a browser.

## Constructors

### Constructor

> **new ClientConfiguration**(): `ClientConfiguration`

Defined in: @nimiq/core/types/wasm/web.d.ts:974

Creates a default client configuration that can be used to change the client's configuration.

Use its `instantiateClient()` method to launch the client and connect to the network.

#### Returns

`ClientConfiguration`

## Methods

### build()

> **build**(): [`PlainClientConfiguration`](../interfaces/PlainClientConfiguration.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1029

Returns a plain configuration object to be passed to `Client.create`.

#### Returns

[`PlainClientConfiguration`](../interfaces/PlainClientConfiguration.md)

***

### desiredPeerCount()

> **desiredPeerCount**(`desired_peer_count`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1004

Sets the desired number of peers the client should try to connect to.
Default is `12`.

#### Parameters

##### desired\_peer\_count

`number`

#### Returns

`void`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:968

#### Returns

`void`

***

### logLevel()

> **logLevel**(`log_level`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:994

Sets the log level that is used when logging to the console.

Possible values are `'trace' | 'debug' | 'info' | 'warn' | 'error'`.
Default is `'info'`.

#### Parameters

##### log\_level

`string`

#### Returns

`void`

***

### network()

> **network**(`network`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:981

Sets the network ID the client should use. Input is case-insensitive.

Possible values are `'MainAlbatross' | 'TestAlbatross' | 'DevAlbatross'`.
Default is `'MainAlbatross'`.

#### Parameters

##### network

`string`

#### Returns

`void`

***

### onlySecureWsConnections()

> **onlySecureWsConnections**(`only_secure_ws_connections`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:999

Sets whether the client should only connect to secure WebSocket connections.
Default is `true`.

#### Parameters

##### only\_secure\_ws\_connections

`boolean`

#### Returns

`void`

***

### peerCountMax()

> **peerCountMax**(`peer_count_max`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1009

Sets the maximum number of peers the client should connect to.
Default is `50`.

#### Parameters

##### peer\_count\_max

`number`

#### Returns

`void`

***

### peerCountPerIpMax()

> **peerCountPerIpMax**(`peer_count_per_ip_max`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1014

Sets the maximum number of peers the client should connect to per IP address.
Default is `10`.

#### Parameters

##### peer\_count\_per\_ip\_max

`number`

#### Returns

`void`

***

### peerCountPerSubnetMax()

> **peerCountPerSubnetMax**(`peer_count_per_subnet_max`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1019

Sets the maximum number of peers the client should connect to per subnet.
Default is `10`.

#### Parameters

##### peer\_count\_per\_subnet\_max

`number`

#### Returns

`void`

***

### seedNodes()

> **seedNodes**(`seeds`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:987

Sets the list of seed nodes that are used to connect to the Nimiq Albatross network.

Each array entry must be a proper Multiaddr format string.

#### Parameters

##### seeds

`any`\[]

#### Returns

`void`

***

### syncMode()

> **syncMode**(`sync_mode`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1025

Sets the sync mode that shoud be used.
Only "light" and "pico" are supported for web clients
Default is "light"

#### Parameters

##### sync\_mode

`string`

#### Returns

`void`

---

---
url: /build/web-client/reference/classes/Commitment.md
---
[@nimiq/core](../globals.md) / Commitment

# Class: Commitment

Defined in: @nimiq/core/types/wasm/web.d.ts:1034

A cryptographic commitment to a [RandomSecret](RandomSecret.md). The commitment is public, while the secret is, well, secret.

## Constructors

### Constructor

> **new Commitment**(`bytes`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1062

Creates a new commitment from a byte array.

Throws when the byte array is not exactly 32 bytes long.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Commitment`

## Properties

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1082

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1081

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1036

#### Returns

`string`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1080

Returns if this commitment is equal to the other commitment.

#### Parameters

##### other

`Commitment`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1035

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1066

Serializes the commitment to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1076

Formats the commitment into a hex string.

#### Returns

`string`

***

### derive()

> `static` **derive**(`random_secret`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1040

Derives a commitment from an existing random secret.

#### Parameters

##### random\_secret

[`RandomSecret`](RandomSecret.md)

#### Returns

`Commitment`

***

### deserialize()

> `static` **deserialize**(`bytes`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1056

Deserializes a commitment from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Commitment`

***

### fromAny()

> `static` **fromAny**(`commitment`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1050

Parses a commitment from a Commitment instance, a hex string representation, or a byte array.

Throws when a Commitment cannot be parsed from the argument.

#### Parameters

##### commitment

`string` | `Uint8Array` | `Commitment`

#### Returns

`Commitment`

***

### fromHex()

> `static` **fromHex**(`hex`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1072

Parses a commitment from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`Commitment`

***

### sum()

> `static` **sum**(`commitments`): `Commitment`

Defined in: @nimiq/core/types/wasm/web.d.ts:1044

Sums up multiple commitments into one aggregated commitment.

#### Parameters

##### commitments

(`string` | `Uint8Array` | `Commitment`)\[]

#### Returns

`Commitment`

---

---
url: /build/web-client/reference/classes/CommitmentPair.md
---
[@nimiq/core](../globals.md) / CommitmentPair

# Class: CommitmentPair

Defined in: @nimiq/core/types/wasm/web.d.ts:1088

A structure holding both a random secret and its corresponding public commitment.
This is similar to a `KeyPair`.

## Constructors

### Constructor

> **new CommitmentPair**(`random_secret`, `commitment`): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1108

#### Parameters

##### random\_secret

[`RandomSecret`](RandomSecret.md)

##### commitment

[`Commitment`](Commitment.md)

#### Returns

`CommitmentPair`

## Properties

### commitment

> `readonly` **commitment**: [`Commitment`](Commitment.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1130

***

### secret

> `readonly` **secret**: [`RandomSecret`](RandomSecret.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1129

***

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1128

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1127

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1090

#### Returns

`string`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1126

Returns if this commitment pair is equal to the other commitment pair.

#### Parameters

##### other

`CommitmentPair`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1089

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1112

Serializes the commitment pair to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1122

Formats the commitment pair into a hex string.

#### Returns

`string`

***

### derive()

> `static` **derive**(`random_secret`): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1107

Derives a commitment pair from an existing random secret.

#### Parameters

##### random\_secret

[`RandomSecret`](RandomSecret.md)

#### Returns

`CommitmentPair`

***

### deserialize()

> `static` **deserialize**(`bytes`): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1102

Deserializes a commitment pair from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`CommitmentPair`

***

### fromAny()

> `static` **fromAny**(`pair`): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1096

Parses a commitment pair from a CommitmentPair instance, a hex string representation, or a byte array.

Throws when a CommitmentPair cannot be parsed from the argument.

#### Parameters

##### pair

`string` | `Uint8Array` | `CommitmentPair`

#### Returns

`CommitmentPair`

***

### fromHex()

> `static` **fromHex**(`hex`): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1118

Parses a commitment pair from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`CommitmentPair`

***

### generate()

> `static` **generate**(): `CommitmentPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1103

#### Returns

`CommitmentPair`

---

---
url: /build/web-client/reference/classes/CryptoUtils.md
---
[@nimiq/core](../globals.md) / CryptoUtils

# Class: CryptoUtils

Defined in: @nimiq/core/types/wasm/web.d.ts:1132

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1134

#### Returns

`void`

***

### computeHmacSha512()

> `static` **computeHmacSha512**(`key`, `data`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1144

Computes a 64-byte [HMAC]-SHA512 hash from the input key and data.

[HMAC]: https://en.wikipedia.org/wiki/HMAC

#### Parameters

##### key

`Uint8Array`

##### data

`Uint8Array`

#### Returns

`Uint8Array`

***

### computePBKDF2sha512()

> `static` **computePBKDF2sha512**(`password`, `salt`, `iterations`, `derived_key_length`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1150

Computes a [PBKDF2]-over-SHA512 key from the password with the given parameters.

[PBKDF2]: https://en.wikipedia.org/wiki/PBKDF2

#### Parameters

##### password

`Uint8Array`

##### salt

`Uint8Array`

##### iterations

`number`

##### derived\_key\_length

`number`

#### Returns

`Uint8Array`

***

### getRandomValues()

> `static` **getRandomValues**(`length`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1138

Generates a secure random byte array of the given length.

#### Parameters

##### length

`number`

#### Returns

`Uint8Array`

***

### otpKdf()

> `static` **otpKdf**(`message`, `key`, `salt`, `iterations`): `Promise`<`Uint8Array`>

Defined in: @nimiq/core/types/wasm/web.d.ts:1158

Encrypts a message with an [OTP] [KDF] and the given parameters.
The KDF uses Argon2d for hashing.

[OTP]: https://en.wikipedia.org/wiki/One-time_pad

[KDF]: https://en.wikipedia.org/wiki/Key_derivation_function

#### Parameters

##### message

`Uint8Array`

##### key

`Uint8Array`

##### salt

`Uint8Array`

##### iterations

`number`

#### Returns

`Promise`<`Uint8Array`>

---

---
url: /build/web-client/reference/classes/Entropy.md
---
[@nimiq/core](../globals.md) / Entropy

# Class: Entropy

Defined in: @nimiq/core/lib/index.d.ts:206

## Extends

* [`Secret`](Secret.md)

## Constructors

### Constructor

> **new Entropy**(`arg`): `Entropy`

Defined in: @nimiq/core/lib/index.d.ts:213

Creates a new Entropy from a byte array.

#### Parameters

##### arg

`Uint8Array`

#### Returns

`Entropy`

#### Overrides

[`Secret`](Secret.md).[`constructor`](Secret.md#constructor)

## Properties

### ENCRYPTION\_CHECKSUM\_SIZE

> `static` **ENCRYPTION\_CHECKSUM\_SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:181

#### Inherited from

[`Secret`](Secret.md).[`ENCRYPTION_CHECKSUM_SIZE`](Secret.md#encryption_checksum_size)

***

### ENCRYPTION\_CHECKSUM\_SIZE\_V3

> `static` **ENCRYPTION\_CHECKSUM\_SIZE\_V3**: `number`

Defined in: @nimiq/core/lib/index.d.ts:182

#### Inherited from

[`Secret`](Secret.md).[`ENCRYPTION_CHECKSUM_SIZE_V3`](Secret.md#encryption_checksum_size_v3)

***

### ENCRYPTION\_KDF\_ROUNDS

> `static` **ENCRYPTION\_KDF\_ROUNDS**: `number`

Defined in: @nimiq/core/lib/index.d.ts:180

#### Inherited from

[`Secret`](Secret.md).[`ENCRYPTION_KDF_ROUNDS`](Secret.md#encryption_kdf_rounds)

***

### ENCRYPTION\_SALT\_SIZE

> `static` **ENCRYPTION\_SALT\_SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:179

#### Inherited from

[`Secret`](Secret.md).[`ENCRYPTION_SALT_SIZE`](Secret.md#encryption_salt_size)

***

### PURPOSE\_ID

> `static` **PURPOSE\_ID**: `number`

Defined in: @nimiq/core/lib/index.d.ts:208

***

### SIZE

> `static` **SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:207

#### Overrides

[`Secret`](Secret.md).[`SIZE`](Secret.md#size)

## Accessors

### encryptedSize

#### Get Signature

> **get** **encryptedSize**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:196

Returns the serialized size of this object when encrypted.

##### Returns

`number`

#### Inherited from

[`Secret`](Secret.md).[`encryptedSize`](Secret.md#encryptedsize)

***

### serializedSize

#### Get Signature

> **get** **serializedSize**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:241

Returns the serialized size of this Entropy.

##### Returns

`number`

## Methods

### compare()

> **compare**(`o`): `number`

Defined in: @nimiq/core/lib/index.d.ts:97

Compares this object to another object.

Returns a negative number if `this` is smaller than o, a positive number if `this` is larger than o, and zero if equal.

#### Parameters

##### o

`Serializable`

#### Returns

`number`

#### Inherited from

[`Secret`](Secret.md).[`compare`](Secret.md#compare)

***

### equals()

> **equals**(`o`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:249

Checks for equality with another Entropy.

#### Parameters

##### o

`unknown`

#### Returns

`boolean`

#### Overrides

[`Secret`](Secret.md).[`equals`](Secret.md#equals)

***

### exportEncrypted()

> **exportEncrypted**(`key`): `Promise`<[`SerialBuffer`](SerialBuffer.md)>

Defined in: @nimiq/core/lib/index.d.ts:192

Encrypts the Secret with a password.

#### Parameters

##### key

`Uint8Array`

#### Returns

`Promise`<[`SerialBuffer`](SerialBuffer.md)>

#### Inherited from

[`Secret`](Secret.md).[`exportEncrypted`](Secret.md#exportencrypted)

***

### overwrite()

> **overwrite**(`entropy`): `void`

Defined in: @nimiq/core/lib/index.d.ts:245

Overwrites this Entropy's bytes with a replacement in-memory

#### Parameters

##### entropy

`Entropy`

#### Returns

`void`

***

### serialize()

> **serialize**(`buf?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:237

Serializes the Entropy to a byte array.

#### Parameters

##### buf?

[`SerialBuffer`](SerialBuffer.md)

#### Returns

[`SerialBuffer`](SerialBuffer.md)

#### Overrides

[`Secret`](Secret.md).[`serialize`](Secret.md#serialize)

***

### toBase64()

> **toBase64**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:106

Formats the object into a base64 string.

#### Returns

`string`

#### Inherited from

[`Secret`](Secret.md).[`toBase64`](Secret.md#tobase64)

***

### toExtendedPrivateKey()

> **toExtendedPrivateKey**(`password?`, `wordlist?`): [`ExtendedPrivateKey`](ExtendedPrivateKey.md)

Defined in: @nimiq/core/lib/index.d.ts:221

Derives an ExtendedPrivateKey from the Entropy.

#### Parameters

##### password?

`string`

##### wordlist?

`string`\[]

#### Returns

[`ExtendedPrivateKey`](ExtendedPrivateKey.md)

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:110

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

[`Secret`](Secret.md).[`toHex`](Secret.md#tohex)

***

### toMnemonic()

> **toMnemonic**(`wordlist?`): `string`\[]

Defined in: @nimiq/core/lib/index.d.ts:225

Converts the Entropy into a mnemonic.

#### Parameters

##### wordlist?

`string`\[]

#### Returns

`string`\[]

***

### toString()

> **toString**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:102

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

[`Secret`](Secret.md).[`toString`](Secret.md#tostring)

***

### deserialize()

> `static` **deserialize**(`buf`): `Entropy`

Defined in: @nimiq/core/lib/index.d.ts:229

Deserializes an Entropy object from a byte array.

#### Parameters

##### buf

[`SerialBuffer`](SerialBuffer.md)

#### Returns

`Entropy`

***

### exportEncrypted()

> `static` **exportEncrypted**(`secret`, `key`): `Promise`<[`SerialBuffer`](SerialBuffer.md)>

Defined in: @nimiq/core/lib/index.d.ts:188

#### Parameters

##### secret

[`Secret`](Secret.md) | `PrivateKey`

##### key

`Uint8Array`

#### Returns

`Promise`<[`SerialBuffer`](SerialBuffer.md)>

#### Inherited from

[`Secret`](Secret.md).[`exportEncrypted`](Secret.md#exportencrypted-2)

***

### fromEncrypted()

> `static` **fromEncrypted**(`buf`, `key`): `Promise`<`Entropy` | `PrivateKey`>

Defined in: @nimiq/core/lib/index.d.ts:187

Decrypts a Secret from an encrypted byte array and its password.

#### Parameters

##### buf

[`SerialBuffer`](SerialBuffer.md)

##### key

`Uint8Array`

#### Returns

`Promise`<`Entropy` | `PrivateKey`>

#### Inherited from

[`Secret`](Secret.md).[`fromEncrypted`](Secret.md#fromencrypted)

***

### fromHex()

> `static` **fromHex**(`hex`): `Entropy`

Defined in: @nimiq/core/lib/index.d.ts:233

Deserializes an Entropy object from a hex string.

#### Parameters

##### hex

`string`

#### Returns

`Entropy`

***

### generate()

> `static` **generate**(): `Entropy`

Defined in: @nimiq/core/lib/index.d.ts:217

Generates a new Entropy object from secure randomness.

#### Returns

`Entropy`

---

---
url: /build/web-client/reference/classes/ES256PublicKey.md
---
[@nimiq/core](../globals.md) / ES256PublicKey

# Class: ES256PublicKey

Defined in: @nimiq/core/types/wasm/web.d.ts:1163

The non-secret (public) part of an ES256 asymmetric key pair that is typically used to digitally verify or encrypt data.

## Constructors

### Constructor

> **new ES256PublicKey**(`bytes`): `ES256PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1207

Creates a new public key from a byte array.

Compatible with the `-7` COSE algorithm identifier.

## Example

```javascript
// Create/register a credential with the Webauthn API:
const cred = await navigator.credentials.create({
    publicKey: {
        pubKeyCredParams: [{
            type: "public-key",
            alg: -7, // ES256 = ECDSA over P-256 with SHA-256
       }],
       // ...
    },
});

// Then create an instance of ES256PublicKey from the credential response:
const publicKey = new Nimiq.ES256PublicKey(new Uint8Array(cred.response.getPublicKey()));
```

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`ES256PublicKey`

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1165

#### Returns

`string`

***

### compare()

> **compare**(`other`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1236

Compares this public key to the other public key.

Returns -1 if this public key is smaller than the other public key, 0 if they are equal,
and 1 if this public key is larger than the other public key.

#### Parameters

##### other

`ES256PublicKey`

#### Returns

`number`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1229

Returns if this public key is equal to the other public key.

#### Parameters

##### other

`ES256PublicKey`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1164

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1211

Serializes the public key to a byte array.

#### Returns

`Uint8Array`

***

### toAddress()

> **toAddress**(): [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1225

Gets the public key's address.

#### Returns

[`Address`](Address.md)

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1221

Formats the public key into a hex string.

#### Returns

`string`

***

### verify()

> **verify**(`signature`, `data`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1169

Verifies that a signature is valid for this public key and the provided data.

#### Parameters

##### signature

[`ES256Signature`](ES256Signature.md)

##### data

`Uint8Array`

#### Returns

`boolean`

***

### deserialize()

> `static` **deserialize**(`bytes`): `ES256PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1175

Deserializes a public key from a byte array.

Throws when the byte array contains less than 33 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`ES256PublicKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `ES256PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1217

Parses a public key from its hex representation.

Throws when the string is not valid hex format or when it represents less than 33 bytes.

#### Parameters

##### hex

`string`

#### Returns

`ES256PublicKey`

***

### fromRaw()

> `static` **fromRaw**(`raw_bytes`): `ES256PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1183

Deserializes a public key from its raw representation.

#### Parameters

##### raw\_bytes

`Uint8Array`

#### Returns

`ES256PublicKey`

***

### fromSpki()

> `static` **fromSpki**(`spki_bytes`): `ES256PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1179

Deserializes a public key from its SPKI representation.

#### Parameters

##### spki\_bytes

`Uint8Array`

#### Returns

`ES256PublicKey`

---

---
url: /build/web-client/reference/classes/ES256Signature.md
---
[@nimiq/core](../globals.md) / ES256Signature

# Class: ES256Signature

Defined in: @nimiq/core/types/wasm/web.d.ts:1242

An ES256 Signature represents a cryptographic proof that an ES256 private key signed some data.
It can be verified with the private key's public key.

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1245

#### Returns

`string`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1244

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1255

Serializes the signature to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1269

Formats the signature into a hex string.

#### Returns

`string`

***

### deserialize()

> `static` **deserialize**(`bytes`): `ES256Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1251

Deserializes an ES256 signature from a byte array.

Throws when the byte array contains less than 64 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`ES256Signature`

***

### fromAsn1()

> `static` **fromAsn1**(`bytes`): `ES256Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1259

Parses an ES256 signature from its ASN.1 representation.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`ES256Signature`

***

### fromHex()

> `static` **fromHex**(`hex`): `ES256Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1265

Parses an ES256 signature from its hex representation.

Throws when the string is not valid hex format or when it represents less than 64 bytes.

#### Parameters

##### hex

`string`

#### Returns

`ES256Signature`

---

---
url: /build/web-client/reference/classes/ExtendedPrivateKey.md
---
[@nimiq/core](../globals.md) / ExtendedPrivateKey

# Class: ExtendedPrivateKey

Defined in: @nimiq/core/lib/index.d.ts:113

## Extends

* `Serializable`

## Constructors

### Constructor

> **new ExtendedPrivateKey**(`key`, `chainCode`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:120

Creates an ExtendedPrivateKey from a private key and chain code.

#### Parameters

##### key

`PrivateKey`

##### chainCode

`Uint8Array`

#### Returns

`ExtendedPrivateKey`

#### Overrides

`Serializable.constructor`

## Properties

### CHAIN\_CODE\_SIZE

> `static` **CHAIN\_CODE\_SIZE**: `number`

Defined in: @nimiq/core/lib/index.d.ts:114

## Accessors

### chainCode

#### Get Signature

> **get** **chainCode**(): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:168

Returns the chain code of this ExtendedPrivateKey.

##### Returns

`Uint8Array`

***

### privateKey

#### Get Signature

> **get** **privateKey**(): `PrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:164

Returns the private key of this ExtendedPrivateKey.

##### Returns

`PrivateKey`

***

### serializedSize

#### Get Signature

> **get** **serializedSize**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:156

Returns the serialized size of this ExtendedPrivateKey.

##### Returns

`number`

## Methods

### compare()

> **compare**(`o`): `number`

Defined in: @nimiq/core/lib/index.d.ts:97

Compares this object to another object.

Returns a negative number if `this` is smaller than o, a positive number if `this` is larger than o, and zero if equal.

#### Parameters

##### o

`Serializable`

#### Returns

`number`

#### Inherited from

`Serializable.compare`

***

### derive()

> **derive**(`index`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:128

Derives a child ExtendedPrivateKey from the current key at the provided index.

#### Parameters

##### index

`number`

#### Returns

`ExtendedPrivateKey`

***

### derivePath()

> **derivePath**(`path`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:136

Derives a child ExtendedPrivateKey from the current key at the provided path.

#### Parameters

##### path

`string`

#### Returns

`ExtendedPrivateKey`

***

### equals()

> **equals**(`o`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:160

Checks for equality with another ExtendedPrivateKey.

#### Parameters

##### o

`unknown`

#### Returns

`boolean`

#### Overrides

`Serializable.equals`

***

### serialize()

> **serialize**(`buf?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:152

Serializes the ExtendedPrivateKey to a byte array.

#### Parameters

##### buf?

[`SerialBuffer`](SerialBuffer.md)

#### Returns

[`SerialBuffer`](SerialBuffer.md)

#### Overrides

`Serializable.serialize`

***

### toAddress()

> **toAddress**(): `Address`

Defined in: @nimiq/core/lib/index.d.ts:172

Returns the address related to this ExtendedPrivateKey.

#### Returns

`Address`

***

### toBase64()

> **toBase64**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:106

Formats the object into a base64 string.

#### Returns

`string`

#### Inherited from

`Serializable.toBase64`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:110

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

`Serializable.toHex`

***

### toString()

> **toString**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:102

Formats the object into a hex string.

#### Returns

`string`

#### Inherited from

`Serializable.toString`

***

### derivePathFromSeed()

> `static` **derivePathFromSeed**(`path`, `seed`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:140

Derives an ExtendedPrivateKey from a seed and a derivation path.

#### Parameters

##### path

`string`

##### seed

`Uint8Array`

#### Returns

`ExtendedPrivateKey`

***

### deserialize()

> `static` **deserialize**(`buf`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:144

Deserializes an ExtendedPrivateKey from a byte array.

#### Parameters

##### buf

[`SerialBuffer`](SerialBuffer.md)

#### Returns

`ExtendedPrivateKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:148

Deserializes an ExtendedPrivateKey from a hex string.

#### Parameters

##### hex

`string`

#### Returns

`ExtendedPrivateKey`

***

### generateMasterKey()

> `static` **generateMasterKey**(`seed`): `ExtendedPrivateKey`

Defined in: @nimiq/core/lib/index.d.ts:124

Generates the master ExtendedPrivateKey from a seed.

#### Parameters

##### seed

`Uint8Array`

#### Returns

`ExtendedPrivateKey`

***

### isValidPath()

> `static` **isValidPath**(`path`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:132

Tests if a HD derivation path is valid.

#### Parameters

##### path

`string`

#### Returns

`boolean`

---

---
url: /build/web-client/reference/classes/Hash.md
---
[@nimiq/core](../globals.md) / Hash

# Class: Hash

Defined in: @nimiq/core/types/wasm/web.d.ts:1271

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1273

#### Returns

`void`

***

### computeBlake2b()

> `static` **computeBlake2b**(`data`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1281

Computes a 32-byte [Blake2b] hash from the input data.

Blake2b is used for example to compute a public key's address.

[Blake2b]: https://en.wikipedia.org/wiki/BLAKE_\(hash_function\)

#### Parameters

##### data

`Uint8Array`

#### Returns

`Uint8Array`

***

### computeNimiqArgon2d()

> `static` **computeNimiqArgon2d**(`password`, `salt`, `iterations`, `derived_key_length`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1306

Computes an [Argon2d] hash with some Nimiq-specific parameters.

`iterations` specifies the number of iterations done in the hash
function. It can be used to control the hash computation time.
Increasing this will make it harder for an attacker to brute-force the
password.

`derived_key_length` specifies the number of bytes that are output.

[Argon2d]: https://en.wikipedia.org/wiki/Argon2

#### Parameters

##### password

`Uint8Array`

##### salt

`Uint8Array`

##### iterations

`number`

##### derived\_key\_length

`number`

#### Returns

`Uint8Array`

***

### computeNimiqArgon2id()

> `static` **computeNimiqArgon2id**(`password`, `salt`, `iterations`, `derived_key_length`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1319

Computes an [Argon2id] hash with some Nimiq-specific parameters.

`iterations` specifies the number of iterations done in the hash
function. It can be used to control the hash computation time.
Increasing this will make it harder for an attacker to brute-force the
password.

`derived_key_length` specifies the number of bytes that are output.

[Argon2id]: https://en.wikipedia.org/wiki/Argon2

#### Parameters

##### password

`Uint8Array`

##### salt

`Uint8Array`

##### iterations

`number`

##### derived\_key\_length

`number`

#### Returns

`Uint8Array`

***

### computeSha256()

> `static` **computeSha256**(`data`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1287

Computes a 32-byte [SHA256] hash from the input data.

[SHA256]: https://en.wikipedia.org/wiki/SHA-2

#### Parameters

##### data

`Uint8Array`

#### Returns

`Uint8Array`

***

### computeSha512()

> `static` **computeSha512**(`data`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1293

Computes a 64-byte [SHA512] hash from the input data.

[SHA512]: https://en.wikipedia.org/wiki/SHA-2

#### Parameters

##### data

`Uint8Array`

#### Returns

`Uint8Array`

---

---
url: /build/web-client/reference/classes/HashedTimeLockedContract.md
---
[@nimiq/core](../globals.md) / HashedTimeLockedContract

# Class: HashedTimeLockedContract

Defined in: @nimiq/core/types/wasm/web.d.ts:1324

Utility class providing methods to parse Hashed Time Locked Contract transaction data and proofs.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1326

#### Returns

`void`

***

### dataToPlain()

> `static` **dataToPlain**(`data`): [`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1330

Parses the data of a Hashed Time Locked Contract creation transaction into a plain object.

#### Parameters

##### data

`Uint8Array`

#### Returns

[`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

***

### proofToPlain()

> `static` **proofToPlain**(`proof`): [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1334

Parses the proof of a Hashed Time Locked Contract settlement transaction into a plain object.

#### Parameters

##### proof

`Uint8Array`

#### Returns

[`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

---

---
url: /build/web-client/reference/classes/KeyPair.md
---
[@nimiq/core](../globals.md) / KeyPair

# Class: KeyPair

Defined in: @nimiq/core/types/wasm/web.d.ts:1340

A keypair represents a private key and its respective public key.
It is used for signing data, usually transactions.

## Constructors

### Constructor

> **new KeyPair**(`private_key`, `public_key`): `KeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1362

#### Parameters

##### private\_key

[`PrivateKey`](PrivateKey.md)

##### public\_key

[`PublicKey`](PublicKey.md)

#### Returns

`KeyPair`

## Properties

### privateKey

> `readonly` **privateKey**: [`PrivateKey`](PrivateKey.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1386

Gets the keypair's private key.

***

### publicKey

> `readonly` **publicKey**: [`PublicKey`](PublicKey.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1390

Gets the keypair's public key.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1341

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1366

Serializes the keypair to a byte array.

#### Returns

`Uint8Array`

***

### sign()

> **sign**(`data`): [`Signature`](Signature.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1370

Signs arbitrary data, returns a signature object.

#### Parameters

##### data

`Uint8Array`

#### Returns

[`Signature`](Signature.md)

***

### signTransaction()

> **signTransaction**(`transaction`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1374

Signs a transaction and sets the signature proof on the transaction object.

#### Parameters

##### transaction

[`Transaction`](Transaction.md)

#### Returns

`void`

***

### toAddress()

> **toAddress**(): [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1378

Gets the keypair's address.

#### Returns

[`Address`](Address.md)

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1382

Formats the keypair into a hex string.

#### Returns

`string`

***

### derive()

> `static` **derive**(`private_key`): `KeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1349

Derives a keypair from an existing private key.

#### Parameters

##### private\_key

[`PrivateKey`](PrivateKey.md)

#### Returns

`KeyPair`

***

### deserialize()

> `static` **deserialize**(`bytes`): `KeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1361

Deserializes a keypair from a byte array.

Throws when the byte array contains less than 64 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`KeyPair`

***

### fromHex()

> `static` **fromHex**(`hex`): `KeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1355

Parses a keypair from its hex representation.

Throws when the string is not valid hex format or when it represents less than 64 bytes.

#### Parameters

##### hex

`string`

#### Returns

`KeyPair`

***

### generate()

> `static` **generate**(): `KeyPair`

Defined in: @nimiq/core/types/wasm/web.d.ts:1345

Generates a new keypair from secure randomness.

#### Returns

`KeyPair`

---

---
url: /build/web-client/reference/classes/MerkleTree.md
---
[@nimiq/core](../globals.md) / MerkleTree

# Class: MerkleTree

Defined in: @nimiq/core/types/wasm/web.d.ts:1395

The Merkle tree is a data structure that allows for efficient verification of the membership of an element in a set.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1397

#### Returns

`void`

***

### computeRoot()

> `static` **computeRoot**(`values`): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1401

Computes the root of a Merkle tree from a list of Uint8Arrays.

#### Parameters

##### values

`Uint8Array`\[]

#### Returns

`Uint8Array`

---

---
url: /build/web-client/reference/classes/MnemonicUtils.md
---
[@nimiq/core](../globals.md) / MnemonicUtils

# Class: MnemonicUtils

Defined in: @nimiq/core/lib/index.d.ts:252

## Constructors

### Constructor

> **new MnemonicUtils**(): `MnemonicUtils`

#### Returns

`MnemonicUtils`

## Properties

### DEFAULT\_WORDLIST

> `static` **DEFAULT\_WORDLIST**: `string`\[]

Defined in: @nimiq/core/lib/index.d.ts:260

The default English wordlist.

***

### ENGLISH\_WORDLIST

> `static` **ENGLISH\_WORDLIST**: `string`\[]

Defined in: @nimiq/core/lib/index.d.ts:256

The English wordlist.

## Methods

### entropyToMnemonic()

> `static` **entropyToMnemonic**(`entropy`, `wordlist?`): `string`\[]

Defined in: @nimiq/core/lib/index.d.ts:264

Converts an Entropy to a mnemonic.

#### Parameters

##### entropy

`string` | `ArrayBuffer` | `Uint8Array` | [`Entropy`](Entropy.md)

##### wordlist?

`string`\[]

#### Returns

`string`\[]

***

### getMnemonicType()

> `static` **getMnemonicType**(`mnemonic`, `wordlist?`): [`MnemonicType`](../@nimiq/namespaces/MnemonicUtils/enumerations/MnemonicType.md)

Defined in: @nimiq/core/lib/index.d.ts:295

Gets the type of a mnemonic.

Return values:

* `0 = MnemonicType.LEGACY`: the mnemonic is for a legacy Nimiq wallet.
* `1 = MnemonicType.BIP39`: the mnemonic is for a BIP39 wallet.
* `-1 = MnemonicType.UNKNOWN`: the mnemonic can be for both.

Throws if the menmonic is invalid.

#### Parameters

##### mnemonic

`string` | `string`\[]

##### wordlist?

`string`\[]

#### Returns

[`MnemonicType`](../@nimiq/namespaces/MnemonicUtils/enumerations/MnemonicType.md)

***

### isCollidingChecksum()

> `static` **isCollidingChecksum**(`entropy`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:284

Tests if a mnemonic can be both for a legacy Nimiq wallet and a BIP39 wallet.

#### Parameters

##### entropy

[`Entropy`](Entropy.md)

#### Returns

`boolean`

***

### mnemonicToEntropy()

> `static` **mnemonicToEntropy**(`mnemonic`, `wordlist?`): [`Entropy`](Entropy.md)

Defined in: @nimiq/core/lib/index.d.ts:268

Converts a mnemonic to an Entropy.

#### Parameters

##### mnemonic

`string` | `string`\[]

##### wordlist?

`string`\[]

#### Returns

[`Entropy`](Entropy.md)

***

### mnemonicToExtendedPrivateKey()

> `static` **mnemonicToExtendedPrivateKey**(`mnemonic`, `password?`): [`ExtendedPrivateKey`](ExtendedPrivateKey.md)

Defined in: @nimiq/core/lib/index.d.ts:280

Converts a mnemonic to an extended private key.

Optionally takes a password to use for the seed derivation.

#### Parameters

##### mnemonic

`string` | `string`\[]

##### password?

`string`

#### Returns

[`ExtendedPrivateKey`](ExtendedPrivateKey.md)

***

### mnemonicToSeed()

> `static` **mnemonicToSeed**(`mnemonic`, `password?`): [`SerialBuffer`](SerialBuffer.md)

Defined in: @nimiq/core/lib/index.d.ts:274

Converts a mnemonic to a seed.

Optionally takes a password to use for the seed derivation.

#### Parameters

##### mnemonic

`string` | `string`\[]

##### password?

`string`

#### Returns

[`SerialBuffer`](SerialBuffer.md)

---

---
url: /build/web-client/reference/classes/NumberUtils.md
---
[@nimiq/core](../globals.md) / NumberUtils

# Class: NumberUtils

Defined in: @nimiq/core/lib/index.d.ts:315

## Constructors

### Constructor

> **new NumberUtils**(): `NumberUtils`

#### Returns

`NumberUtils`

## Properties

### UINT16\_MAX

> `static` **UINT16\_MAX**: `number`

Defined in: @nimiq/core/lib/index.d.ts:317

***

### UINT32\_MAX

> `static` **UINT32\_MAX**: `number`

Defined in: @nimiq/core/lib/index.d.ts:318

***

### UINT64\_MAX

> `static` **UINT64\_MAX**: `number`

Defined in: @nimiq/core/lib/index.d.ts:319

***

### UINT8\_MAX

> `static` **UINT8\_MAX**: `number`

Defined in: @nimiq/core/lib/index.d.ts:316

## Methods

### isInteger()

> `static` **isInteger**(`val`): `val is number`

Defined in: @nimiq/core/lib/index.d.ts:320

#### Parameters

##### val

`unknown`

#### Returns

`val is number`

***

### isUint16()

> `static` **isUint16**(`val`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:322

#### Parameters

##### val

`unknown`

#### Returns

`boolean`

***

### isUint32()

> `static` **isUint32**(`val`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:323

#### Parameters

##### val

`unknown`

#### Returns

`boolean`

***

### isUint64()

> `static` **isUint64**(`val`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:324

#### Parameters

##### val

`unknown`

#### Returns

`boolean`

***

### isUint8()

> `static` **isUint8**(`val`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:321

#### Parameters

##### val

`unknown`

#### Returns

`boolean`

---

---
url: /build/web-client/reference/classes/PartialSignature.md
---
[@nimiq/core](../globals.md) / PartialSignature

# Class: PartialSignature

Defined in: @nimiq/core/types/wasm/web.d.ts:1407

A partial signature is a signature of one of the co-signers in a multisig.
Combining all partial signatures yields the full signature (combining is done through summation).

## Constructors

### Constructor

> **new PartialSignature**(`bytes`): `PartialSignature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1427

Creates a new partial signature from a byte array.

Throws when the byte array is not exactly 32 bytes long.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PartialSignature`

## Properties

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1448

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1447

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1409

#### Returns

`string`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1446

Returns if this partial signature is equal to the other partial signature.

#### Parameters

##### other

`PartialSignature`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1408

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1432

Serializes the partial signature to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1442

Formats the partial signature into a hex string.

#### Returns

`string`

***

### create()

> `static` **create**(`own_private_key`, `own_public_key`, `own_commitment_pairs`, `other_public_keys`, `other_commitments`, `data`): `PartialSignature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1428

#### Parameters

##### own\_private\_key

[`PrivateKey`](PrivateKey.md)

##### own\_public\_key

[`PublicKey`](PublicKey.md)

##### own\_commitment\_pairs

(`string` | `Uint8Array` | [`CommitmentPair`](CommitmentPair.md))\[]

##### other\_public\_keys

(`string` | `Uint8Array` | [`PublicKey`](PublicKey.md))\[]

##### other\_commitments

(`string` | `Uint8Array` | [`Commitment`](Commitment.md))\[]\[]

##### data

`Uint8Array`

#### Returns

`PartialSignature`

***

### deserialize()

> `static` **deserialize**(`bytes`): `PartialSignature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1421

Deserializes a partial signature from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PartialSignature`

***

### fromAny()

> `static` **fromAny**(`secret`): `PartialSignature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1415

Parses a partial signature from a PartialSignature instance, a hex string representation, or a byte array.

Throws when a PartialSignature cannot be parsed from the argument.

#### Parameters

##### secret

`string` | `Uint8Array` | `PartialSignature`

#### Returns

`PartialSignature`

***

### fromHex()

> `static` **fromHex**(`hex`): `PartialSignature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1438

Parses a partial signature from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`PartialSignature`

---

---
url: /build/web-client/reference/classes/Policy.md
---
[@nimiq/core](../globals.md) / Policy

# Class: Policy

Defined in: @nimiq/core/types/wasm/web.d.ts:1450

## Properties

### BATCHES\_PER\_EPOCH

> `readonly` `static` **BATCHES\_PER\_EPOCH**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1580

How many batches constitute an epoch

***

### BLOCK\_SEPARATION\_TIME

> `readonly` `static` **BLOCK\_SEPARATION\_TIME**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1644

The optimal time in milliseconds between blocks (1s)

***

### BLOCKS\_PER\_BATCH

> `readonly` `static` **BLOCKS\_PER\_BATCH**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1584

Length of a batch including the macro block

***

### BLOCKS\_PER\_EPOCH

> `readonly` `static` **BLOCKS\_PER\_EPOCH**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1588

Length of an epoch including the election block

***

### BLS\_CACHE\_MAX\_CAPACITY

> `readonly` `static` **BLS\_CACHE\_MAX\_CAPACITY**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1675

The maximum size of the BLS public key cache.

***

### COINBASE\_ADDRESS

> `readonly` `static` **COINBASE\_ADDRESS**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1605

This is the address for the coinbase. Note that this is not a real account, it is just the
address we use to denote that some coins originated from a coinbase event.

***

### F\_PLUS\_ONE

> `readonly` `static` **F\_PLUS\_ONE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1636

Calculates f+1 slots which is the minimum number of slots necessary to be guaranteed to have at
least one honest slots. That's because from a total of 3f+1 slots at most f will be malicious.
It is calculated as `ceil(SLOTS/3)` and we use the formula `ceil(x/y) = (x+y-1)/y` for the
ceiling division.

***

### GENESIS\_BLOCK\_NUMBER

> `readonly` `static` **GENESIS\_BLOCK\_NUMBER**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1592

Genesis block number

***

### HISTORY\_CHUNKS\_MAX\_SIZE

> `readonly` `static` **HISTORY\_CHUNKS\_MAX\_SIZE**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1680

Maximum size of history chunks.
25 MB.

***

### JAIL\_EPOCHS

> `readonly` `static` **JAIL\_EPOCHS**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1667

The number of epochs a validator is put in jail for. The jailing only happens for severe offenses.

***

### MAX\_SIZE\_MICRO\_BODY

> `readonly` `static` **MAX\_SIZE\_MICRO\_BODY**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1609

The maximum allowed size, in bytes, for a micro block body.

***

### MIN\_EPOCHS\_STORED

> `readonly` `static` **MIN\_EPOCHS\_STORED**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1648

Minimum number of epochs that the ChainStore will store fully

***

### MIN\_PRODUCER\_TIMEOUT

> `readonly` `static` **MIN\_PRODUCER\_TIMEOUT**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1640

The minimum timeout in milliseconds for a validator to produce a block (4s)

***

### MINIMUM\_REWARDS\_PERCENTAGE

> `readonly` `static` **MINIMUM\_REWARDS\_PERCENTAGE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1657

The minimum rewards percentage that we allow

***

### SLOTS

> `readonly` `static` **SLOTS**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1617

Number of available validator slots. Note that a single validator may own several validator slots.

***

### STAKING\_CONTRACT\_ADDRESS

> `readonly` `static` **STAKING\_CONTRACT\_ADDRESS**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1600

This is the address for the staking contract.

***

### STATE\_CHUNKS\_MAX\_SIZE

> `readonly` `static` **STATE\_CHUNKS\_MAX\_SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1596

Maximum size of accounts trie chunks.

***

### TIMESTAMP\_MAX\_DRIFT

> `readonly` `static` **TIMESTAMP\_MAX\_DRIFT**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1653

The maximum drift, in milliseconds, that is allowed between any block's timestamp and the node's
system time. We only care about drifting to the future.

***

### TOTAL\_SUPPLY

> `readonly` `static` **TOTAL\_SUPPLY**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1671

Total supply in units.

***

### TRANSACTION\_VALIDITY\_WINDOW

> `readonly` `static` **TRANSACTION\_VALIDITY\_WINDOW**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1572

Number of batches a transaction is valid with Albatross consensus.

***

### TRANSACTION\_VALIDITY\_WINDOW\_BLOCKS

> `readonly` `static` **TRANSACTION\_VALIDITY\_WINDOW\_BLOCKS**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1576

Number of blocks a transaction is valid with Albatross consensus.

***

### TWO\_F\_PLUS\_ONE

> `readonly` `static` **TWO\_F\_PLUS\_ONE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1629

Calculates 2f+1 slots which is the minimum number of slots necessary to produce a macro block,
a skip block and other actions.
It is also the minimum number of slots necessary to be guaranteed to have a majority of honest
slots. That's because from a total of 3f+1 slots at most f will be malicious. If in a group of
2f+1 slots we have f malicious ones (which is the worst case scenario), that still leaves us
with f+1 honest slots. Which is more than the f slots that are not in this group (which must all
be honest).
It is calculated as `ceil(SLOTS*2/3)` and we use the formula `ceil(x/y) = (x+y-1)/y` for the
ceiling division.

***

### VALIDATOR\_DEPOSIT

> `readonly` `static` **VALIDATOR\_DEPOSIT**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1663

The deposit necessary to create a validator in Lunas (1 NIM = 100,000 Lunas).
A validator is someone who actually participates in block production. They are akin to miners
in proof-of-work.

***

### VERSION

> `readonly` `static` **VERSION**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1613

The current version number of the protocol. Changing this always results in a hard fork.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1452

#### Returns

`void`

***

### batchAt()

> `static` **batchAt**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1465

Returns the batch number at a given `block_number` (height)

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### batchDelayPenalty()

> `static` **batchDelayPenalty**(`delay`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1568

Returns the percentage reduction that should be applied to the rewards due to a delayed batch.
This function returns a float in the range \[0, 1]
I.e 1 means that the full rewards should be given, whereas 0.5 means that half of the rewards should be given
The input to this function is the batch delay, in milliseconds
The function is: \[(1 - MINIMUM\_REWARDS\_PERCENTAGE) \* BLOCKS\_DELAY\_DECAY ^ (t^2)] + MINIMUM\_REWARDS\_PERCENTAGE

#### Parameters

##### delay

`bigint`

#### Returns

`number`

***

### batchIndexAt()

> `static` **batchIndexAt**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1470

Returns the batch index at a given block number. The batch index is the number of a block relative
to the batch it is in. For example, the first block of any batch always has an batch index of 0.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### blockAfterJail()

> `static` **blockAfterJail**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1550

Returns the first block after the jail period of a given block number has ended.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### blockAfterReportingWindow()

> `static` **blockAfterReportingWindow**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1546

Returns the first block after the reporting window of a given block number has ended.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### electionBlockAfter()

> `static` **electionBlockAfter**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1474

Returns the number (height) of the next election macro block after a given block number (height).

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### electionBlockBefore()

> `static` **electionBlockBefore**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1479

Returns the block number (height) of the preceding election macro block before a given block number (height).
If the given block number is an election macro block, it returns the election macro block before it.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### electionBlockOf()

> `static` **electionBlockOf**(`epoch`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1526

Returns the block number of the election macro block of the given epoch (which is always the last block).
If the index is out of bounds, None is returned

#### Parameters

##### epoch

`number`

#### Returns

`number`

***

### epochAt()

> `static` **epochAt**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1456

Returns the epoch number at a given block number (height).

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### epochIndexAt()

> `static` **epochIndexAt**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1461

Returns the epoch index at a given block number. The epoch index is the number of a block relative
to the epoch it is in. For example, the first block of any epoch always has an epoch index of 0.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### firstBatchOfEpoch()

> `static` **firstBatchOfEpoch**(`block_number`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1537

Returns a boolean expressing if the batch at a given block number (height) is the first batch
of the epoch.

#### Parameters

##### block\_number

`number`

#### Returns

`boolean`

***

### firstBlockOf()

> `static` **firstBlockOf**(`epoch`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1516

Returns the block number of the first block of the given epoch (which is always a micro block).
If the index is out of bounds, None is returned

#### Parameters

##### epoch

`number`

#### Returns

`number`

***

### firstBlockOfBatch()

> `static` **firstBlockOfBatch**(`batch`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1521

Returns the block number of the first block of the given batch (which is always a micro block).
If the index is out of bounds, None is returned

#### Parameters

##### batch

`number`

#### Returns

`number`

***

### isElectionBlockAt()

> `static` **isElectionBlockAt**(`block_number`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1488

Returns a boolean expressing if the block at a given block number (height) is an election macro block.

#### Parameters

##### block\_number

`number`

#### Returns

`boolean`

***

### isMacroBlockAt()

> `static` **isMacroBlockAt**(`block_number`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1507

Returns a boolean expressing if the block at a given block number (height) is a macro block.

#### Parameters

##### block\_number

`number`

#### Returns

`boolean`

***

### isMicroBlockAt()

> `static` **isMicroBlockAt**(`block_number`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1511

Returns a boolean expressing if the block at a given block number (height) is a micro block.

#### Parameters

##### block\_number

`number`

#### Returns

`boolean`

***

### lastBlockOfReportingWindow()

> `static` **lastBlockOfReportingWindow**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1542

Returns the block height for the last block of the reporting window of a given block number.
Note: This window is meant for reporting malicious behaviour (aka `jailable` behaviour).

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### lastElectionBlock()

> `static` **lastElectionBlock**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1484

Returns the block number (height) of the last election macro block at a given block number (height).
If the given block number is an election macro block, then it returns that block number.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### lastMacroBlock()

> `static` **lastMacroBlock**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1503

Returns the block number (height) of the last macro block at a given block number (height).
If the given block number is a macro block, then it returns that block number.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### macroBlockAfter()

> `static` **macroBlockAfter**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1493

Returns the block number (height) of the next macro block after a given block number (height).
If the given block number is a macro block, it returns the macro block after it.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### macroBlockBefore()

> `static` **macroBlockBefore**(`block_number`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1498

Returns the block number (height) of the preceding macro block before a given block number (height).
If the given block number is a macro block, it returns the macro block before it.

#### Parameters

##### block\_number

`number`

#### Returns

`number`

***

### macroBlockOf()

> `static` **macroBlockOf**(`batch`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1532

Returns the block number of the macro block (checkpoint or election) of the given batch (which
is always the last block).
If the index is out of bounds, None is returned

#### Parameters

##### batch

`number`

#### Returns

`number`

***

### supplyAt()

> `static` **supplyAt**(`genesis_supply`, `genesis_time`, `current_time`): `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:1560

Returns the supply at a given time (as Unix time) in Lunas (1 NIM = 100,000 Lunas). It is
calculated using the following formula:

```text
supply(t) = total_supply - (total_supply - genesis_supply) * supply_decay^t
```

Where t is the time in milliseconds since the PoS genesis block and `genesis_supply` is the supply at
the genesis of the Nimiq 2.0 chain.

#### Parameters

##### genesis\_supply

`bigint`

##### genesis\_time

`bigint`

##### current\_time

`bigint`

#### Returns

`bigint`

---

---
url: /build/web-client/reference/classes/PrivateKey.md
---
[@nimiq/core](../globals.md) / PrivateKey

# Class: PrivateKey

Defined in: @nimiq/core/types/wasm/web.d.ts:1685

The secret (private) part of an asymmetric key pair that is typically used to digitally sign or decrypt data.

## Constructors

### Constructor

> **new PrivateKey**(`bytes`): `PrivateKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1702

Creates a new private key from a byte array.

Throws when the byte array is not exactly 32 bytes long.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PrivateKey`

## Properties

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1723

***

### PURPOSE\_ID

> `readonly` `static` **PURPOSE\_ID**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1721

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1722

## Methods

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1720

Returns if this private key is equal to the other private key.

#### Parameters

##### other

`PrivateKey`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1686

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1706

Serializes the private key to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1716

Formats the private key into a hex string.

#### Returns

`string`

***

### deserialize()

> `static` **deserialize**(`bytes`): `PrivateKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1696

Deserializes a private key from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PrivateKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `PrivateKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1712

Parses a private key from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`PrivateKey`

***

### generate()

> `static` **generate**(): `PrivateKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1690

Generates a new private key from secure randomness.

#### Returns

`PrivateKey`

---

---
url: /build/web-client/reference/classes/PublicKey.md
---
[@nimiq/core](../globals.md) / PublicKey

# Class: PublicKey

Defined in: @nimiq/core/types/wasm/web.d.ts:1728

The non-secret (public) part of an asymmetric key pair that is typically used to digitally verify or encrypt data.

## Constructors

### Constructor

> **new PublicKey**(`bytes`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1764

Creates a new public key from a byte array.

Throws when the byte array is not exactly 32 bytes long.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PublicKey`

## Properties

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1795

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1794

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1730

#### Returns

`string`

***

### compare()

> **compare**(`other`): `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1793

Compares this public key to the other public key.

Returns -1 if this public key is smaller than the other public key, 0 if they are equal,
and 1 if this public key is larger than the other public key.

#### Parameters

##### other

`PublicKey`

#### Returns

`number`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1786

Returns if this public key is equal to the other public key.

#### Parameters

##### other

`PublicKey`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1729

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1768

Serializes the public key to a byte array.

#### Returns

`Uint8Array`

***

### toAddress()

> **toAddress**(): [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1782

Gets the public key's address.

#### Returns

[`Address`](Address.md)

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1778

Formats the public key into a hex string.

#### Returns

`string`

***

### verify()

> **verify**(`signature`, `data`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1744

Verifies that a signature is valid for this public key and the provided data.

#### Parameters

##### signature

[`Signature`](Signature.md)

##### data

`Uint8Array`

#### Returns

`boolean`

***

### derive()

> `static` **derive**(`private_key`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1734

Derives a public key from an existing private key.

#### Parameters

##### private\_key

[`PrivateKey`](PrivateKey.md)

#### Returns

`PublicKey`

***

### deserialize()

> `static` **deserialize**(`bytes`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1750

Deserializes a public key from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`PublicKey`

***

### fromAny()

> `static` **fromAny**(`key`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1740

Parses a public key from a PublicKey instance, a hex string representation, or a byte array.

Throws when an PublicKey cannot be parsed from the argument.

#### Parameters

##### key

`string` | `Uint8Array` | `PublicKey`

#### Returns

`PublicKey`

***

### fromHex()

> `static` **fromHex**(`hex`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1774

Parses a public key from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`PublicKey`

***

### fromRaw()

> `static` **fromRaw**(`raw_bytes`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1758

Deserializes a public key from its raw representation.

#### Parameters

##### raw\_bytes

`Uint8Array`

#### Returns

`PublicKey`

***

### fromSpki()

> `static` **fromSpki**(`spki_bytes`): `PublicKey`

Defined in: @nimiq/core/types/wasm/web.d.ts:1754

Deserializes a public key from its SPKI representation.

#### Parameters

##### spki\_bytes

`Uint8Array`

#### Returns

`PublicKey`

---

---
url: /build/web-client/reference/classes/RandomSecret.md
---
[@nimiq/core](../globals.md) / RandomSecret

# Class: RandomSecret

Defined in: @nimiq/core/types/wasm/web.d.ts:1801

A random secret that proves a [Commitment](Commitment.md) for signing multisignature transactions.
It is supposed to be kept secret (similar to a private key).

## Constructors

### Constructor

> **new RandomSecret**(`bytes`): `RandomSecret`

Defined in: @nimiq/core/types/wasm/web.d.ts:1821

Creates a new random secret from a byte array.

Throws when the byte array is not exactly 32 bytes long.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`RandomSecret`

## Properties

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1841

***

### SIZE

> `readonly` `static` **SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1840

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1803

#### Returns

`string`

***

### equals()

> **equals**(`other`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1839

Returns if this random secret is equal to the other random secret.

#### Parameters

##### other

`RandomSecret`

#### Returns

`boolean`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1802

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1825

Serializes the random secret to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1835

Formats the random secret into a hex string.

#### Returns

`string`

***

### deserialize()

> `static` **deserialize**(`bytes`): `RandomSecret`

Defined in: @nimiq/core/types/wasm/web.d.ts:1815

Deserializes a random secret from a byte array.

Throws when the byte array contains less than 32 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`RandomSecret`

***

### fromAny()

> `static` **fromAny**(`secret`): `RandomSecret`

Defined in: @nimiq/core/types/wasm/web.d.ts:1809

Parses a random secret from a RandomSecret instance, a hex string representation, or a byte array.

Throws when a RandomSecret cannot be parsed from the argument.

#### Parameters

##### secret

`string` | `Uint8Array` | `RandomSecret`

#### Returns

`RandomSecret`

***

### fromHex()

> `static` **fromHex**(`hex`): `RandomSecret`

Defined in: @nimiq/core/types/wasm/web.d.ts:1831

Parses a random secret from its hex representation.

Throws when the string is not valid hex format or when it represents less than 32 bytes.

#### Parameters

##### hex

`string`

#### Returns

`RandomSecret`

---

---
url: /build/web-client/reference/classes/SerialBuffer.md
---
[@nimiq/core](../globals.md) / SerialBuffer

# Class: SerialBuffer

Defined in: @nimiq/core/lib/index.d.ts:7

## Extends

* `Uint8Array`

## Indexable

\[`index`: `number`]: `number`

## Constructors

### Constructor

> **new SerialBuffer**(`length`): `SerialBuffer`

Defined in: @nimiq/core/lib/index.d.ts:12

#### Parameters

##### length

`number`

#### Returns

`SerialBuffer`

#### Overrides

`Uint8Array.constructor`

### Constructor

> **new SerialBuffer**(`array`): `SerialBuffer`

Defined in: @nimiq/core/lib/index.d.ts:13

#### Parameters

##### array

`ArrayLike`<`number`> | `ArrayBufferLike`

#### Returns

`SerialBuffer`

#### Overrides

`Uint8Array.constructor`

## Properties

### \[toStringTag]

> `readonly` **\[toStringTag]**: `"Uint8Array"`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.symbol.wellknown.d.ts:284

#### Inherited from

`Uint8Array.[toStringTag]`

***

### buffer

> `readonly` **buffer**: `ArrayBufferLike`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2166

The ArrayBuffer instance referenced by the array.

#### Inherited from

`Uint8Array.buffer`

***

### byteLength

> `readonly` **byteLength**: `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2171

The length in bytes of the array.

#### Inherited from

`Uint8Array.byteLength`

***

### byteOffset

> `readonly` **byteOffset**: `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2176

The offset in bytes of the array.

#### Inherited from

`Uint8Array.byteOffset`

***

### BYTES\_PER\_ELEMENT

> `readonly` **BYTES\_PER\_ELEMENT**: `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2161

The size in bytes of each element in the array.

#### Inherited from

`Uint8Array.BYTES_PER_ELEMENT`

***

### length

> `readonly` **length**: `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2275

The length of the array.

#### Inherited from

`Uint8Array.length`

***

### BYTES\_PER\_ELEMENT

> `readonly` `static` **BYTES\_PER\_ELEMENT**: `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2410

The size in bytes of each element in the array.

#### Inherited from

`Uint8Array.BYTES_PER_ELEMENT`

***

### EMPTY

> `static` **EMPTY**: `SerialBuffer`

Defined in: @nimiq/core/lib/index.d.ts:11

## Accessors

### readPos

#### Get Signature

> **get** **readPos**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:15

##### Returns

`number`

#### Set Signature

> **set** **readPos**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:16

##### Parameters

###### value

`number`

##### Returns

`void`

***

### writePos

#### Get Signature

> **get** **writePos**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:17

##### Returns

`number`

#### Set Signature

> **set** **writePos**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:18

##### Parameters

###### value

`number`

##### Returns

`void`

## Methods

### \[iterator]\()

> **\[iterator]**(): `IterableIterator`<`number`>

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.iterable.d.ts:270

#### Returns

`IterableIterator`<`number`>

#### Inherited from

`Uint8Array.[iterator]`

***

### at()

> **at**(`index`): `number`

Defined in: .pnpm/@types+node@22.15.30/node\_modules/@types/node/compatibility/indexable.d.ts:7

#### Parameters

##### index

`number`

#### Returns

`number`

#### Inherited from

`Uint8Array.at`

***

### copyWithin()

> **copyWithin**(`target`, `start`, `end?`): `this`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2187

Returns the this object after copying a section of the array identified by start and end
to the same array starting at position target

#### Parameters

##### target

`number`

If target is negative, it is treated as length+target where length is the
length of the array.

##### start

`number`

If start is negative, it is treated as length+start. If end is negative, it
is treated as length+end.

##### end?

`number`

If not specified, length of the this object is used as its default value.

#### Returns

`this`

#### Inherited from

`Uint8Array.copyWithin`

***

### entries()

> **entries**(): `IterableIterator`<\[`number`, `number`]>

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.iterable.d.ts:274

Returns an array of key, value pairs for every entry in the array

#### Returns

`IterableIterator`<\[`number`, `number`]>

#### Inherited from

`Uint8Array.entries`

***

### every()

> **every**(`predicate`, `thisArg?`): `boolean`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2197

Determines whether all the members of an array satisfy the specified test.

#### Parameters

##### predicate

(`value`, `index`, `array`) => `unknown`

A function that accepts up to three arguments. The every method calls
the predicate function for each element in the array until the predicate returns a value
which is coercible to the Boolean value false, or until the end of the array.

##### thisArg?

`any`

An object to which the this keyword can refer in the predicate function.
If thisArg is omitted, undefined is used as the this value.

#### Returns

`boolean`

#### Inherited from

`Uint8Array.every`

***

### fill()

> **fill**(`value`, `start?`, `end?`): `this`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2207

Changes all array elements from `start` to `end` index to a static `value` and returns the modified array

#### Parameters

##### value

`number`

value to fill array section with

##### start?

`number`

index to start filling the array at. If start is negative, it is treated as
length+start where length is the length of the array.

##### end?

`number`

index to stop filling the array at. If end is negative, it is treated as
length+end.

#### Returns

`this`

#### Inherited from

`Uint8Array.fill`

***

### filter()

> **filter**(`predicate`, `thisArg?`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2216

Returns the elements of an array that meet the condition specified in a callback function.

#### Parameters

##### predicate

(`value`, `index`, `array`) => `any`

A function that accepts up to three arguments. The filter method calls
the predicate function one time for each element in the array.

##### thisArg?

`any`

An object to which the this keyword can refer in the predicate function.
If thisArg is omitted, undefined is used as the this value.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.filter`

***

### find()

> **find**(`predicate`, `thisArg?`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2227

Returns the value of the first element in the array where predicate is true, and undefined
otherwise.

#### Parameters

##### predicate

(`value`, `index`, `obj`) => `boolean`

find calls predicate once for each element of the array, in ascending
order, until it finds one where predicate returns true. If such an element is found, find
immediately returns that element value. Otherwise, find returns undefined.

##### thisArg?

`any`

If provided, it will be used as the this value for each invocation of
predicate. If it is not provided, undefined is used instead.

#### Returns

`number`

#### Inherited from

`Uint8Array.find`

***

### findIndex()

> **findIndex**(`predicate`, `thisArg?`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2238

Returns the index of the first element in the array where predicate is true, and -1
otherwise.

#### Parameters

##### predicate

(`value`, `index`, `obj`) => `boolean`

find calls predicate once for each element of the array, in ascending
order, until it finds one where predicate returns true. If such an element is found,
findIndex immediately returns that element index. Otherwise, findIndex returns -1.

##### thisArg?

`any`

If provided, it will be used as the this value for each invocation of
predicate. If it is not provided, undefined is used instead.

#### Returns

`number`

#### Inherited from

`Uint8Array.findIndex`

***

### forEach()

> **forEach**(`callbackfn`, `thisArg?`): `void`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2247

Performs the specified action for each element in an array.

#### Parameters

##### callbackfn

(`value`, `index`, `array`) => `void`

A function that accepts up to three arguments. forEach calls the
callbackfn function one time for each element in the array.

##### thisArg?

`any`

An object to which the this keyword can refer in the callbackfn function.
If thisArg is omitted, undefined is used as the this value.

#### Returns

`void`

#### Inherited from

`Uint8Array.forEach`

***

### includes()

> **includes**(`searchElement`, `fromIndex?`): `boolean`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2016.array.include.d.ts:52

Determines whether an array includes a certain element, returning true or false as appropriate.

#### Parameters

##### searchElement

`number`

The element to search for.

##### fromIndex?

`number`

The position in this array at which to begin searching for searchElement.

#### Returns

`boolean`

#### Inherited from

`Uint8Array.includes`

***

### indexOf()

> **indexOf**(`searchElement`, `fromIndex?`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2255

Returns the index of the first occurrence of a value in an array.

#### Parameters

##### searchElement

`number`

The value to locate in the array.

##### fromIndex?

`number`

The array index at which to begin the search. If fromIndex is omitted, the
search starts at index 0.

#### Returns

`number`

#### Inherited from

`Uint8Array.indexOf`

***

### join()

> **join**(`separator?`): `string`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2262

Adds all the elements of an array separated by the specified separator string.

#### Parameters

##### separator?

`string`

A string used to separate one element of an array from the next in the
resulting String. If omitted, the array elements are separated with a comma.

#### Returns

`string`

#### Inherited from

`Uint8Array.join`

***

### keys()

> **keys**(): `IterableIterator`<`number`>

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.iterable.d.ts:278

Returns an list of keys in the array

#### Returns

`IterableIterator`<`number`>

#### Inherited from

`Uint8Array.keys`

***

### lastIndexOf()

> **lastIndexOf**(`searchElement`, `fromIndex?`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2270

Returns the index of the last occurrence of a value in an array.

#### Parameters

##### searchElement

`number`

The value to locate in the array.

##### fromIndex?

`number`

The array index at which to begin the search. If fromIndex is omitted, the
search starts at index 0.

#### Returns

`number`

#### Inherited from

`Uint8Array.lastIndexOf`

***

### map()

> **map**(`callbackfn`, `thisArg?`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2285

Calls a defined callback function on each element of an array, and returns an array that
contains the results.

#### Parameters

##### callbackfn

(`value`, `index`, `array`) => `number`

A function that accepts up to three arguments. The map method calls the
callbackfn function one time for each element in the array.

##### thisArg?

`any`

An object to which the this keyword can refer in the callbackfn function.
If thisArg is omitted, undefined is used as the this value.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.map`

***

### read()

> **read**(`length`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:23

#### Parameters

##### length

`number`

#### Returns

`Uint8Array`

***

### readFloat64()

> **readFloat64**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:36

#### Returns

`number`

***

### readPaddedString()

> **readPaddedString**(`length`): `string`

Defined in: @nimiq/core/lib/index.d.ts:40

#### Parameters

##### length

`number`

#### Returns

`string`

***

### readString()

> **readString**(`length`): `string`

Defined in: @nimiq/core/lib/index.d.ts:38

#### Parameters

##### length

`number`

#### Returns

`string`

***

### readUint16()

> **readUint16**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:27

#### Returns

`number`

***

### readUint32()

> **readUint32**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:29

#### Returns

`number`

***

### readUint64()

> **readUint64**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:31

#### Returns

`number`

***

### readUint8()

> **readUint8**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:25

#### Returns

`number`

***

### readVarLengthString()

> **readVarLengthString**(): `string`

Defined in: @nimiq/core/lib/index.d.ts:42

#### Returns

`string`

***

### readVarUint()

> **readVarUint**(): `number`

Defined in: @nimiq/core/lib/index.d.ts:33

#### Returns

`number`

***

### reduce()

#### Call Signature

> **reduce**(`callbackfn`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2297

Calls the specified callback function for all the elements in an array. The return value of
the callback function is the accumulated result, and is provided as an argument in the next
call to the callback function.

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `number`

A function that accepts up to four arguments. The reduce method calls the
callbackfn function one time for each element in the array.

##### Returns

`number`

##### Inherited from

`Uint8Array.reduce`

#### Call Signature

> **reduce**(`callbackfn`, `initialValue`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2298

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `number`

###### initialValue

`number`

##### Returns

`number`

##### Inherited from

`Uint8Array.reduce`

#### Call Signature

> **reduce**<`U`>(`callbackfn`, `initialValue`): `U`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2310

Calls the specified callback function for all the elements in an array. The return value of
the callback function is the accumulated result, and is provided as an argument in the next
call to the callback function.

##### Type Parameters

###### U

`U`

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `U`

A function that accepts up to four arguments. The reduce method calls the
callbackfn function one time for each element in the array.

###### initialValue

`U`

If initialValue is specified, it is used as the initial value to start
the accumulation. The first call to the callbackfn function provides this value as an argument
instead of an array value.

##### Returns

`U`

##### Inherited from

`Uint8Array.reduce`

***

### reduceRight()

#### Call Signature

> **reduceRight**(`callbackfn`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2322

Calls the specified callback function for all the elements in an array, in descending order.
The return value of the callback function is the accumulated result, and is provided as an
argument in the next call to the callback function.

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `number`

A function that accepts up to four arguments. The reduceRight method calls
the callbackfn function one time for each element in the array.

##### Returns

`number`

##### Inherited from

`Uint8Array.reduceRight`

#### Call Signature

> **reduceRight**(`callbackfn`, `initialValue`): `number`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2323

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `number`

###### initialValue

`number`

##### Returns

`number`

##### Inherited from

`Uint8Array.reduceRight`

#### Call Signature

> **reduceRight**<`U`>(`callbackfn`, `initialValue`): `U`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2335

Calls the specified callback function for all the elements in an array, in descending order.
The return value of the callback function is the accumulated result, and is provided as an
argument in the next call to the callback function.

##### Type Parameters

###### U

`U`

##### Parameters

###### callbackfn

(`previousValue`, `currentValue`, `currentIndex`, `array`) => `U`

A function that accepts up to four arguments. The reduceRight method calls
the callbackfn function one time for each element in the array.

###### initialValue

`U`

If initialValue is specified, it is used as the initial value to start
the accumulation. The first call to the callbackfn function provides this value as an argument
instead of an array value.

##### Returns

`U`

##### Inherited from

`Uint8Array.reduceRight`

***

### reset()

> **reset**(): `void`

Defined in: @nimiq/core/lib/index.d.ts:22

Resets the read and write position of the buffer to zero.

#### Returns

`void`

***

### reverse()

> **reverse**(): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2340

Reverses the elements in an Array.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.reverse`

***

### set()

> **set**(`array`, `offset?`): `void`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2347

Sets a value or an array of values.

#### Parameters

##### array

`ArrayLike`<`number`>

A typed or untyped array of values to set.

##### offset?

`number`

The index in the current array at which the values are to be written.

#### Returns

`void`

#### Inherited from

`Uint8Array.set`

***

### slice()

> **slice**(`start?`, `end?`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2354

Returns a section of an array.

#### Parameters

##### start?

`number`

The beginning of the specified portion of the array.

##### end?

`number`

The end of the specified portion of the array. This is exclusive of the element at the index 'end'.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.slice`

***

### some()

> **some**(`predicate`, `thisArg?`): `boolean`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2364

Determines whether the specified callback function returns true for any element of an array.

#### Parameters

##### predicate

(`value`, `index`, `array`) => `unknown`

A function that accepts up to three arguments. The some method calls
the predicate function for each element in the array until the predicate returns a value
which is coercible to the Boolean value true, or until the end of the array.

##### thisArg?

`any`

An object to which the this keyword can refer in the predicate function.
If thisArg is omitted, undefined is used as the this value.

#### Returns

`boolean`

#### Inherited from

`Uint8Array.some`

***

### sort()

> **sort**(`compareFn?`): `this`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2375

Sorts an array.

#### Parameters

##### compareFn?

(`a`, `b`) => `number`

Function used to determine the order of the elements. It is expected to return
a negative value if first argument is less than second argument, zero if they're equal and a positive
value otherwise. If omitted, the elements are sorted in ascending order.

```ts
[11,2,22,1].sort((a, b) => a - b)
```

#### Returns

`this`

#### Inherited from

`Uint8Array.sort`

***

### subarray()

> **subarray**(`start?`, `end?`): `Uint8Array`

Defined in: @nimiq/core/lib/index.d.ts:14

Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements
at begin, inclusive, up to end, exclusive.

#### Parameters

##### start?

`number`

##### end?

`number`

The index of the end of the array.

#### Returns

`Uint8Array`

#### Overrides

`Uint8Array.subarray`

***

### toLocaleString()

> **toLocaleString**(): `string`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2388

Converts a number to a string by using the current locale.

#### Returns

`string`

#### Inherited from

`Uint8Array.toLocaleString`

***

### toString()

> **toString**(): `string`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2393

Returns a string representation of an array.

#### Returns

`string`

#### Inherited from

`Uint8Array.toString`

***

### valueOf()

> **valueOf**(): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2396

Returns the primitive value of the specified object.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.valueOf`

***

### values()

> **values**(): `IterableIterator`<`number`>

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.iterable.d.ts:282

Returns an list of values in the array

#### Returns

`IterableIterator`<`number`>

#### Inherited from

`Uint8Array.values`

***

### write()

> **write**(`array`): `void`

Defined in: @nimiq/core/lib/index.d.ts:24

#### Parameters

##### array

`Uint8Array`

#### Returns

`void`

***

### writeFloat64()

> **writeFloat64**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:37

#### Parameters

##### value

`number`

#### Returns

`void`

***

### writePaddedString()

> **writePaddedString**(`value`, `length`): `void`

Defined in: @nimiq/core/lib/index.d.ts:41

#### Parameters

##### value

`string`

##### length

`number`

#### Returns

`void`

***

### writeString()

> **writeString**(`value`, `length`): `void`

Defined in: @nimiq/core/lib/index.d.ts:39

#### Parameters

##### value

`string`

##### length

`number`

#### Returns

`void`

***

### writeUint16()

> **writeUint16**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:28

#### Parameters

##### value

`number`

#### Returns

`void`

***

### writeUint32()

> **writeUint32**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:30

#### Parameters

##### value

`number`

#### Returns

`void`

***

### writeUint64()

> **writeUint64**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:32

#### Parameters

##### value

`number`

#### Returns

`void`

***

### writeUint8()

> **writeUint8**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:26

#### Parameters

##### value

`number`

#### Returns

`void`

***

### writeVarLengthString()

> **writeVarLengthString**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:43

#### Parameters

##### value

`string`

#### Returns

`void`

***

### writeVarUint()

> **writeVarUint**(`value`): `void`

Defined in: @nimiq/core/lib/index.d.ts:34

#### Parameters

##### value

`number`

#### Returns

`void`

***

### from()

#### Call Signature

> `static` **from**(`arrayLike`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2422

Creates an array from an array-like or iterable object.

##### Parameters

###### arrayLike

`ArrayLike`<`number`>

An array-like or iterable object to convert to an array.

##### Returns

`Uint8Array`

##### Inherited from

`Uint8Array.from`

#### Call Signature

> `static` **from**<`T`>(`arrayLike`, `mapfn`, `thisArg?`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2430

Creates an array from an array-like or iterable object.

##### Type Parameters

###### T

`T`

##### Parameters

###### arrayLike

`ArrayLike`<`T`>

An array-like or iterable object to convert to an array.

###### mapfn

(`v`, `k`) => `number`

A mapping function to call on every element of the array.

###### thisArg?

`any`

Value of 'this' used to invoke the mapfn.

##### Returns

`Uint8Array`

##### Inherited from

`Uint8Array.from`

#### Call Signature

> `static` **from**(`arrayLike`, `mapfn?`, `thisArg?`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es2015.iterable.d.ts:294

Creates an array from an array-like or iterable object.

##### Parameters

###### arrayLike

`Iterable`<`number`>

An array-like or iterable object to convert to an array.

###### mapfn?

(`v`, `k`) => `number`

A mapping function to call on every element of the array.

###### thisArg?

`any`

Value of 'this' used to invoke the mapfn.

##### Returns

`Uint8Array`

##### Inherited from

`Uint8Array.from`

***

### of()

> `static` **of**(...`items`): `Uint8Array`

Defined in: .pnpm/typescript@5.4.5/node\_modules/typescript/lib/lib.es5.d.ts:2416

Returns a new array from a set of elements.

#### Parameters

##### items

...`number`\[]

A set of elements to include in the new array object.

#### Returns

`Uint8Array`

#### Inherited from

`Uint8Array.of`

***

### varLengthStringSize()

> `static` **varLengthStringSize**(`value`): `number`

Defined in: @nimiq/core/lib/index.d.ts:44

#### Parameters

##### value

`string`

#### Returns

`number`

***

### varUintSize()

> `static` **varUintSize**(`value`): `number`

Defined in: @nimiq/core/lib/index.d.ts:35

#### Parameters

##### value

`number`

#### Returns

`number`

---

---
url: /build/web-client/reference/classes/Signature.md
---
[@nimiq/core](../globals.md) / Signature

# Class: Signature

Defined in: @nimiq/core/types/wasm/web.d.ts:1847

An Ed25519 Signature represents a cryptographic proof that a private key signed some data.
It can be verified with the private key's public key.

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1850

#### Returns

`string`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1849

#### Returns

`void`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1860

Serializes the signature to a byte array.

#### Returns

`Uint8Array`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1878

Formats the signature into a hex string.

#### Returns

`string`

***

### create()

> `static` **create**(`private_key`, `public_key`, `data`): `Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1864

Create a signature from a private key and its public key over byte data.

#### Parameters

##### private\_key

[`PrivateKey`](PrivateKey.md)

##### public\_key

[`PublicKey`](PublicKey.md)

##### data

`Uint8Array`

#### Returns

`Signature`

***

### deserialize()

> `static` **deserialize**(`bytes`): `Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1856

Deserializes an Ed25519 signature from a byte array.

Throws when the byte array contains less than 64 bytes.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Signature`

***

### fromAsn1()

> `static` **fromAsn1**(`bytes`): `Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1868

Parses an Ed25519 signature from its ASN.1 representation.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Signature`

***

### fromHex()

> `static` **fromHex**(`hex`): `Signature`

Defined in: @nimiq/core/types/wasm/web.d.ts:1874

Parses an Ed25519 signature from its hex representation.

Throws when the string is not valid hex format or when it represents less than 64 bytes.

#### Parameters

##### hex

`string`

#### Returns

`Signature`

---

---
url: /build/web-client/reference/classes/SignatureProof.md
---
[@nimiq/core](../globals.md) / SignatureProof

# Class: SignatureProof

Defined in: @nimiq/core/types/wasm/web.d.ts:1884

A signature proof represents a signature together with its public key and the public key's merkle path.
It is used as the proof for transactions.

## Properties

### publicKey

> `readonly` **publicKey**: [`PublicKey`](PublicKey.md) | [`ES256PublicKey`](ES256PublicKey.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1933

The embedded public key.

***

### signature

> `readonly` **signature**: [`ES256Signature`](ES256Signature.md) | [`Signature`](Signature.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1929

The embedded signature.

***

### ES256\_SINGLE\_SIG\_SIZE

> `readonly` `static` **ES256\_SINGLE\_SIG\_SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1925

***

### SINGLE\_SIG\_SIZE

> `readonly` `static` **SINGLE\_SIG\_SIZE**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:1924

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1886

#### Returns

`void`

***

### isSignedBy()

> **isSignedBy**(`sender`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1911

Checks if the signature proof is signed by the provided address.

#### Parameters

##### sender

[`Address`](Address.md)

#### Returns

`boolean`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:1915

Serializes the proof to a byte array, e.g. for assigning it to a `transaction.proof` field.

#### Returns

`Uint8Array`

***

### toPlain()

> **toPlain**(): [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1919

Creates a JSON-compatible plain object representing the signature proof.

#### Returns

[`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

***

### verify()

> **verify**(`data`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:1907

Verifies the signature proof against the provided data.

#### Parameters

##### data

`Uint8Array`

#### Returns

`boolean`

***

### deserialize()

> `static` **deserialize**(`bytes`): `SignatureProof`

Defined in: @nimiq/core/types/wasm/web.d.ts:1923

Deserializes a signature proof from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`SignatureProof`

***

### multiSig()

> `static` **multiSig**(`signer_key`, `public_keys`, `signature`): `SignatureProof`

Defined in: @nimiq/core/types/wasm/web.d.ts:1895

Creates a Ed25519/Schnorr signature proof for a multi-sig signature.
The public keys can also include ES256 keys.

#### Parameters

##### signer\_key

[`PublicKey`](PublicKey.md)

##### public\_keys

([`PublicKey`](PublicKey.md) | [`ES256PublicKey`](ES256PublicKey.md))\[]

##### signature

[`Signature`](Signature.md)

#### Returns

`SignatureProof`

***

### singleSig()

> `static` **singleSig**(`public_key`, `signature`): `SignatureProof`

Defined in: @nimiq/core/types/wasm/web.d.ts:1890

Creates a Ed25519/Schnorr signature proof for a single-sig signature.

#### Parameters

##### public\_key

[`PublicKey`](PublicKey.md)

##### signature

[`Signature`](Signature.md)

#### Returns

`SignatureProof`

***

### webauthnMultiSig()

> `static` **webauthnMultiSig**(`signer_key`, `public_keys`, `signature`, `authenticator_data`, `client_data_json`): `SignatureProof`

Defined in: @nimiq/core/types/wasm/web.d.ts:1903

Creates a Webauthn signature proof for a multi-sig signature.

#### Parameters

##### signer\_key

[`PublicKey`](PublicKey.md) | [`ES256PublicKey`](ES256PublicKey.md)

##### public\_keys

([`PublicKey`](PublicKey.md) | [`ES256PublicKey`](ES256PublicKey.md))\[]

##### signature

[`ES256Signature`](ES256Signature.md) | [`Signature`](Signature.md)

##### authenticator\_data

`Uint8Array`

##### client\_data\_json

`Uint8Array`

#### Returns

`SignatureProof`

***

### webauthnSingleSig()

> `static` **webauthnSingleSig**(`public_key`, `signature`, `authenticator_data`, `client_data_json`): `SignatureProof`

Defined in: @nimiq/core/types/wasm/web.d.ts:1899

Creates a Webauthn signature proof for a single-sig signature.

#### Parameters

##### public\_key

[`PublicKey`](PublicKey.md) | [`ES256PublicKey`](ES256PublicKey.md)

##### signature

[`ES256Signature`](ES256Signature.md) | [`Signature`](Signature.md)

##### authenticator\_data

`Uint8Array`

##### client\_data\_json

`Uint8Array`

#### Returns

`SignatureProof`

---

---
url: /build/web-client/reference/classes/StakingContract.md
---
[@nimiq/core](../globals.md) / StakingContract

# Class: StakingContract

Defined in: @nimiq/core/types/wasm/web.d.ts:1938

Utility class providing methods to parse Staking Contract transaction data and proofs.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1940

#### Returns

`void`

***

### dataToPlain()

> `static` **dataToPlain**(`data`): [`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1944

Parses the data of a Staking Contract incoming transaction into a plain object.

#### Parameters

##### data

`Uint8Array`

#### Returns

[`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

***

### proofToPlain()

> `static` **proofToPlain**(`proof`): [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:1948

Parses the proof of a Staking Contract outgoing transaction into a plain object.

#### Parameters

##### proof

`Uint8Array`

#### Returns

[`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

---

---
url: /build/web-client/reference/classes/StringUtils.md
---
[@nimiq/core](../globals.md) / StringUtils

# Class: StringUtils

Defined in: @nimiq/core/lib/index.d.ts:327

## Constructors

### Constructor

> **new StringUtils**(): `StringUtils`

#### Returns

`StringUtils`

## Methods

### isHex()

> `static` **isHex**(`str`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:329

#### Parameters

##### str

`string`

#### Returns

`boolean`

***

### isHexBytes()

> `static` **isHexBytes**(`str`, `length?`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:330

#### Parameters

##### str

`string`

##### length?

`number`

#### Returns

`boolean`

***

### isWellFormed()

> `static` **isWellFormed**(`str`): `boolean`

Defined in: @nimiq/core/lib/index.d.ts:328

#### Parameters

##### str

`string`

#### Returns

`boolean`

---

---
url: /build/web-client/reference/classes/Transaction.md
---
[@nimiq/core](../globals.md) / Transaction

# Class: Transaction

Defined in: @nimiq/core/types/wasm/web.d.ts:1959

Transactions describe a transfer of value, usually from the sender to the recipient.
However, transactions can also have no value, when they are used to *signal* a change in the staking contract.

Transactions can be used to create contracts, such as vesting contracts and HTLCs.

Transactions require a valid signature proof over their serialized content.
Furthermore, transactions are only valid for 2 hours after their validity-start block height.

## Constructors

### Constructor

> **new Transaction**(`sender`, `sender_type`, `sender_data`, `recipient`, `recipient_type`, `recipient_data`, `value`, `fee`, `flags`, `validity_start_height`, `network_id`): `Transaction`

Defined in: @nimiq/core/types/wasm/web.d.ts:1992

Creates a new unsigned transaction that transfers `value` amount of luna (NIM's smallest unit)
from the sender to the recipient, where both sender and recipient can be any account type,
and custom extra data can be added to the transaction.

### Basic transactions

If both the sender and recipient types are omitted or `0` and both data and flags are empty,
a smaller basic transaction is created.

### Extended transactions

If no flags are given, but sender type is not basic (`0`) or data is set, an extended
transaction is created.

### Contract creation transactions

To create a new vesting or HTLC contract, set `flags` to `0b1` and specify the contract
type as the `recipient_type`: `1` for vesting, `2` for HTLC. The `data` bytes must have
the correct format of contract creation data for the respective contract type.

### Signaling transactions

To interact with the staking contract, signaling transaction are often used to not
transfer any value, but to simply *signal* a state change instead, such as changing one's
delegation from one validator to another. To create such a transaction, set `flags` to `
0b10` and populate the `data` bytes accordingly.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when an account type is unknown, the numbers given for value and fee do not fit
within a u64 or the networkId is unknown. Also throws when no data or recipient type is
given for contract creation transactions, or no data is given for signaling transactions.

#### Parameters

##### sender

[`Address`](Address.md)

##### sender\_type

`number`

##### sender\_data

`Uint8Array`

##### recipient

[`Address`](Address.md)

##### recipient\_type

`number`

##### recipient\_data

`Uint8Array`

##### value

`bigint`

##### fee

`bigint`

##### flags

`number`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

`Transaction`

## Properties

### data

> **data**: `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:2105

The transaction's data as a byte array.

***

### fee

> `readonly` **fee**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2085

The transaction's fee in luna (NIM's smallest unit).

***

### feePerByte

> `readonly` **feePerByte**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2089

The transaction's fee per byte in luna (NIM's smallest unit).

***

### flags

> `readonly` **flags**: [`TransactionFlag`](../enumerations/TransactionFlag.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2101

The transaction's flags: `0b1` = contract creation, `0b10` = signaling.

***

### format

> `readonly` **format**: [`TransactionFormat`](../enumerations/TransactionFormat.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2061

The transaction's [TransactionFormat](../enumerations/TransactionFormat.md).

***

### networkId

> `readonly` **networkId**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2097

The transaction's network ID.

***

### proof

> **proof**: `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:2113

The transaction's signature proof as a byte array.

***

### recipient

> `readonly` **recipient**: [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2073

The transaction's recipient address.

***

### recipientType

> `readonly` **recipientType**: [`AccountType`](../enumerations/AccountType.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2077

The transaction's recipient [AccountType](../enumerations/AccountType.md).

***

### sender

> `readonly` **sender**: [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2065

The transaction's sender address.

***

### senderData

> `readonly` **senderData**: `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:2109

The transaction's sender data as a byte array.

***

### senderType

> `readonly` **senderType**: [`AccountType`](../enumerations/AccountType.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2069

The transaction's sender [AccountType](../enumerations/AccountType.md).

***

### serializedSize

> `readonly` **serializedSize**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2117

The transaction's byte size.

***

### validityStartHeight

> `readonly` **validityStartHeight**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2093

The transaction's validity-start height. The transaction is valid for 2 hours after this block height.

***

### value

> `readonly` **value**: `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2081

The transaction's value in luna (NIM's smallest unit).

## Methods

### \_\_getClassname()

> **\_\_getClassname**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:1961

#### Returns

`string`

***

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:1960

#### Returns

`void`

***

### getContractCreationAddress()

> **getContractCreationAddress**(): [`Address`](Address.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2024

Returns the address of the contract that is created with this transaction.

#### Returns

[`Address`](Address.md)

***

### hash()

> **hash**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:2007

Computes the transaction's hash, which is used as its unique identifier on the blockchain.

#### Returns

`string`

***

### isValidAt()

> **isValidAt**(`block_height`): `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:2020

Tests if the transaction is valid at the specified block height.

#### Parameters

##### block\_height

`number`

#### Returns

`boolean`

***

### serialize()

> **serialize**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:2032

Serializes the transaction to a byte array.

#### Returns

`Uint8Array`

***

### serializeContent()

> **serializeContent**(): `Uint8Array`

Defined in: @nimiq/core/types/wasm/web.d.ts:2028

Serializes the transaction's content to be used for creating its signature.

#### Returns

`Uint8Array`

***

### sign()

> **sign**(`key_pair`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2003

Signs the transaction with the provided key pair. Automatically determines the format
of the signature proof required for the transaction.

### Limitations

* HTLC redemption is not supported and will throw.
* For transaction to the staking contract, both signatures are made with the same keypair,
  so it is not possible to interact with a staker that is different from the sender address
  or using a different cold or signing key for validator transactions.

#### Parameters

##### key\_pair

[`KeyPair`](KeyPair.md)

#### Returns

`void`

***

### toHex()

> **toHex**(): `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:2036

Serializes the transaction into a HEX string.

#### Returns

`string`

***

### toPlain()

> **toPlain**(`genesis_block_number?`, `genesis_timestamp?`): [`PlainTransaction`](../interfaces/PlainTransaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2040

Creates a JSON-compatible plain object representing the transaction.

#### Parameters

##### genesis\_block\_number?

`number`

##### genesis\_timestamp?

`bigint`

#### Returns

[`PlainTransaction`](../interfaces/PlainTransaction.md)

***

### verify()

> **verify**(`network_id?`): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2016

Verifies that a transaction has valid properties and a valid signature proof.
Optionally checks if the transaction is valid on the provided network.

**Throws with any transaction validity error.** Returns without exception if the transaction is valid.

Throws when the given networkId is unknown.

#### Parameters

##### network\_id?

`number`

#### Returns

`void`

***

### deserialize()

> `static` **deserialize**(`bytes`): `Transaction`

Defined in: @nimiq/core/types/wasm/web.d.ts:2044

Deserializes a transaction from a byte array.

#### Parameters

##### bytes

`Uint8Array`

#### Returns

`Transaction`

***

### fromAny()

> `static` **fromAny**(`tx`): `Transaction`

Defined in: @nimiq/core/types/wasm/web.d.ts:2051

Parses a transaction from a Transaction instance, a plain object, a hex string
representation, or a byte array.

Throws when a transaction cannot be parsed from the argument.

#### Parameters

##### tx

`string` | [`PlainTransaction`](../interfaces/PlainTransaction.md) | `Uint8Array` | `Transaction`

#### Returns

`Transaction`

***

### fromPlain()

> `static` **fromPlain**(`plain`): `Transaction`

Defined in: @nimiq/core/types/wasm/web.d.ts:2057

Parses a transaction from a plain object.

Throws when a transaction cannot be parsed from the argument.

#### Parameters

##### plain

[`PlainTransaction`](../interfaces/PlainTransaction.md)

#### Returns

`Transaction`

---

---
url: /build/web-client/reference/classes/TransactionBuilder.md
---
[@nimiq/core](../globals.md) / TransactionBuilder

# Class: TransactionBuilder

Defined in: @nimiq/core/types/wasm/web.d.ts:2123

The TransactionBuilder class provides helper methods to easily create standard types of transactions.
It can only be instantiated from a Client with `client.transactionBuilder()`.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2125

#### Returns

`void`

***

### newAddStake()

> `static` **newAddStake**(`sender`, `staker_address`, `value`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2161

Adds stake to a staker in the staking contract and transfers `value` amount of luna (NIM's smallest unit)
from the sender account to this staker.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for value and fee do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### staker\_address

[`Address`](Address.md)

##### value

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newBasic()

> `static` **newBasic**(`sender`, `recipient`, `value`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2134

Creates a basic transaction that transfers `value` amount of luna (NIM's smallest unit) from the
sender to the recipient.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for value and fee do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### recipient

[`Address`](Address.md)

##### value

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newBasicWithData()

> `static` **newBasicWithData**(`sender`, `recipient`, `data`, `value`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2143

Creates a basic transaction that transfers `value` amount of luna (NIM's smallest unit) from the
sender to the recipient. It can include arbitrary `data`, up to 64 bytes.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for value and fee do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### recipient

[`Address`](Address.md)

##### data

`Uint8Array`

##### value

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newCreateStaker()

> `static` **newCreateStaker**(`sender`, `delegation`, `value`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2152

Creates a new staker in the staking contract and transfers `value` amount of luna (NIM's smallest unit)
from the sender account to this new staker.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for value and fee do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### delegation

[`Address`](Address.md)

##### value

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newCreateValidator()

> `static` **newCreateValidator**(`sender`, `reward_address`, `signing_key`, `voting_key_pair`, `signal_data`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2205

Registers a new validator in the staking contract.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the fee does not fit within a u64 or the `networkId` is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### reward\_address

[`Address`](Address.md)

##### signing\_key

[`PublicKey`](PublicKey.md)

##### voting\_key\_pair

[`BLSKeyPair`](BLSKeyPair.md)

##### signal\_data

`string`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newDeactivateValidator()

> `static` **newDeactivateValidator**(`sender`, `validator`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2221

Deactivates a validator in the staking contract.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the fee does not fit within a u64 or the `networkId` is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### validator

[`Address`](Address.md)

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newDeleteValidator()

> `static` **newDeleteValidator**(`sender`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2229

Deleted a validator the staking contract. The deposit is returned to the Sender

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the fee does not fit within a u64 or the `networkId` is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newRemoveStake()

> `static` **newRemoveStake**(`recipient`, `value`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2197

Removes stake from the staking contract and transfers `value` amount of luna (NIM's smallest unit)
from the staker to the recipient.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for value and fee do not fit within a u64 or the networkId is unknown.

#### Parameters

##### recipient

[`Address`](Address.md)

##### value

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newRetireStake()

> `static` **newRetireStake**(`sender`, `retire_stake`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2188

Retires a portion of the inactive stake balance of the staker. This is a
signaling transaction and as such does not transfer any value.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for fee and `retire_stake` do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### retire\_stake

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newRetireValidator()

> `static` **newRetireValidator**(`sender`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2237

Retires a validator in the staking contract.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the fee does not fit within a u64 or the `networkId` is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newSetActiveStake()

> `static` **newSetActiveStake**(`sender`, `new_active_balance`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2179

Sets the active stake balance of the staker. This is a
signaling transaction and as such does not transfer any value.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the numbers given for fee and `new_active_balance` do not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### new\_active\_balance

`bigint`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newUpdateStaker()

> `static` **newUpdateStaker**(`sender`, `new_delegation`, `reactivate_all_stake`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2170

Updates a staker in the staking contract to stake for a different validator. This is a
signaling transaction and as such does not transfer any value.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the number given for fee does not fit within a u64 or the networkId is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### new\_delegation

[`Address`](Address.md)

##### reactivate\_all\_stake

`boolean`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

***

### newUpdateValidator()

> `static` **newUpdateValidator**(`sender`, `reward_address`, `signing_key`, `voting_key_pair`, `signal_data`, `fee`, `validity_start_height`, `network_id`): [`Transaction`](Transaction.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2213

Updates parameters of a validator in the staking contract.

The returned transaction is not yet signed. You can sign it e.g. with `tx.sign(keyPair)`.

Throws when the fee does not fit within a u64 or the `networkId` is unknown.

#### Parameters

##### sender

[`Address`](Address.md)

##### reward\_address

[`Address`](Address.md)

##### signing\_key

[`PublicKey`](PublicKey.md)

##### voting\_key\_pair

[`BLSKeyPair`](BLSKeyPair.md)

##### signal\_data

`string`

##### fee

`bigint`

##### validity\_start\_height

`number`

##### network\_id

`number`

#### Returns

[`Transaction`](Transaction.md)

---

---
url: /build/web-client/reference/classes/VestingContract.md
---
[@nimiq/core](../globals.md) / VestingContract

# Class: VestingContract

Defined in: @nimiq/core/types/wasm/web.d.ts:2242

Utility class providing methods to parse Vesting Contract transaction data and proofs.

## Methods

### free()

> **free**(): `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2244

#### Returns

`void`

***

### dataToPlain()

> `static` **dataToPlain**(`data`, `tx_value`): [`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2248

Parses the data of a Vesting Contract creation transaction into a plain object.

#### Parameters

##### data

`Uint8Array`

##### tx\_value

`bigint`

#### Returns

[`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

***

### proofToPlain()

> `static` **proofToPlain**(`proof`): [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2252

Parses the proof of a Vesting Contract claiming transaction into a plain object.

#### Parameters

##### proof

`Uint8Array`

#### Returns

[`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

---

---
url: /build/web-client/reference/enumerations/AccountType.md
---
[@nimiq/core](../globals.md) / AccountType

# Enumeration: AccountType

Defined in: @nimiq/core/types/wasm/web.d.ts:3

## Enumeration Members

### Basic

> **Basic**: `0`

Defined in: @nimiq/core/types/wasm/web.d.ts:4

***

### HTLC

> **HTLC**: `2`

Defined in: @nimiq/core/types/wasm/web.d.ts:6

***

### Staking

> **Staking**: `3`

Defined in: @nimiq/core/types/wasm/web.d.ts:7

***

### Vesting

> **Vesting**: `1`

Defined in: @nimiq/core/types/wasm/web.d.ts:5

---

---
url: >-
  /build/web-client/reference/@nimiq/namespaces/MnemonicUtils/enumerations/MnemonicType.md
---
[@nimiq/core](../../../../globals.md) / [MnemonicUtils](../index.md) / MnemonicType

# Enumeration: MnemonicType

Defined in: @nimiq/core/lib/index.d.ts:308

## Enumeration Members

### BIP39

> **BIP39**: `1`

Defined in: @nimiq/core/lib/index.d.ts:311

***

### LEGACY

> **LEGACY**: `0`

Defined in: @nimiq/core/lib/index.d.ts:310

***

### UNKNOWN

> **UNKNOWN**: `-1`

Defined in: @nimiq/core/lib/index.d.ts:309

---

---
url: /build/web-client/reference/enumerations/TransactionFlag.md
---
[@nimiq/core](../globals.md) / TransactionFlag

# Enumeration: TransactionFlag

Defined in: @nimiq/core/types/wasm/web.d.ts:14

A transaction flag signals a special purpose of the transaction. `ContractCreation` must be set
to create new vesting contracts or HTLCs. `Signaling` must be set to interact with the staking
contract for non-value transactions. All other transactions' flag is set to `None`.

## Enumeration Members

### ContractCreation

> **ContractCreation**: `1`

Defined in: @nimiq/core/types/wasm/web.d.ts:16

***

### None

> **None**: `0`

Defined in: @nimiq/core/types/wasm/web.d.ts:15

***

### Signaling

> **Signaling**: `2`

Defined in: @nimiq/core/types/wasm/web.d.ts:17

---

---
url: /build/web-client/reference/enumerations/TransactionFormat.md
---
[@nimiq/core](../globals.md) / TransactionFormat

# Enumeration: TransactionFormat

Defined in: @nimiq/core/types/wasm/web.d.ts:19

## Enumeration Members

### Basic

> **Basic**: `0`

Defined in: @nimiq/core/types/wasm/web.d.ts:20

***

### Extended

> **Extended**: `1`

Defined in: @nimiq/core/types/wasm/web.d.ts:21

---

---
url: /build/web-client/reference/@nimiq/namespaces/Secret/enumerations/Type.md
---
[@nimiq/core](../../../../globals.md) / [Secret](../index.md) / Type

# Enumeration: Type

Defined in: @nimiq/core/lib/index.d.ts:200

## Enumeration Members

### ENTROPY

> **ENTROPY**: `2`

Defined in: @nimiq/core/lib/index.d.ts:202

***

### PRIVATE\_KEY

> **PRIVATE\_KEY**: `1`

Defined in: @nimiq/core/lib/index.d.ts:201

---

---
url: /build/web-client/reference/functions/default.md
---
[@nimiq/core](../globals.md) / default

# Function: default()

> **default**(`module_or_path?`): `Promise`<[`InitOutput`](../interfaces/InitOutput.md)>

Defined in: @nimiq/core/types/wasm/web.d.ts:2624

If `module_or_path` is {RequestInfo} or {URL}, makes a request and
for everything else, calls `WebAssembly.instantiate` directly.

## Parameters

### module\_or\_path?

Passing `InitInput` directly is deprecated.

{ `module_or_path`: InitInput | Promise\<InitInput>; } | [`InitInput`](../type-aliases/InitInput.md) | `Promise`<[`InitInput`](../type-aliases/InitInput.md)>

## Returns

`Promise`<[`InitOutput`](../interfaces/InitOutput.md)>

---

---
url: /build/web-client/reference/functions/initSync.md
---
[@nimiq/core](../globals.md) / initSync

# Function: initSync()

> **initSync**(`module`): [`InitOutput`](../interfaces/InitOutput.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:2614

Instantiates the given `module`, which can either be bytes or
a precompiled `WebAssembly.Module`.

## Parameters

### module

Passing `SyncInitInput` directly is deprecated.

{ `module`: [`SyncInitInput`](../type-aliases/SyncInitInput.md); } | [`SyncInitInput`](../type-aliases/SyncInitInput.md)

## Returns

[`InitOutput`](../interfaces/InitOutput.md)

---

---
url: /build/web-client/integrations/CommonJS.md
---
# Install for CommonJS

The Nimiq Web Client ships with support for CommonJS.

***

And now you are ready to go!

```javascript
const Nimiq = require('@nimiq/core')

async function main() {
  const config = new Nimiq.ClientConfiguration()
  const client = await Nimiq.Client.create(config.build())
}
main()
```

---

---
url: /build/web-client/integrations/NextJS.md
---
# Install in NextJS

The Nimiq Web Client ships with support for NextJS.

***

And now you are ready to go!

---

---
url: /build/web-client/integrations/ESM.md
---
# Install with ESM

The Nimiq Web Client ships with support for ESM.

***

And now you are ready to go!

---

---
url: /build/web-client/installation.md
---

# Installation

Multiple integrations so you can use Nimiq anywhere.{.nq-subline}

---

---
url: /build/web-client/reference/interfaces/InitOutput.md
---
[@nimiq/core](../globals.md) / InitOutput

# Interface: InitOutput

Defined in: @nimiq/core/types/wasm/web.d.ts:2257

## Properties

### \_\_externref\_table\_alloc()

> `readonly` **\_\_externref\_table\_alloc**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2589

#### Returns

`number`

***

### \_\_externref\_table\_dealloc()

> `readonly` **\_\_externref\_table\_dealloc**: (`a`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2593

#### Parameters

##### a

`number`

#### Returns

`void`

***

### \_\_wbg\_address\_free()

> `readonly` **\_\_wbg\_address\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2260

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_blskeypair\_free()

> `readonly` **\_\_wbg\_blskeypair\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2510

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_blspublickey\_free()

> `readonly` **\_\_wbg\_blspublickey\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2519

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_blssecretkey\_free()

> `readonly` **\_\_wbg\_blssecretkey\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2525

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_client\_free()

> `readonly` **\_\_wbg\_client\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2479

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_clientconfiguration\_free()

> `readonly` **\_\_wbg\_clientconfiguration\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2272

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_commitment\_free()

> `readonly` **\_\_wbg\_commitment\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2331

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_commitmentpair\_free()

> `readonly` **\_\_wbg\_commitmentpair\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2343

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_cryptoutils\_free()

> `readonly` **\_\_wbg\_cryptoutils\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2533

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_es256publickey\_free()

> `readonly` **\_\_wbg\_es256publickey\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2377

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_es256signature\_free()

> `readonly` **\_\_wbg\_es256signature\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2390

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_hash\_free()

> `readonly` **\_\_wbg\_hash\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2473

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_hashedtimelockedcontract\_free()

> `readonly` **\_\_wbg\_hashedtimelockedcontract\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2467

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_keypair\_free()

> `readonly` **\_\_wbg\_keypair\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2396

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_merkletree\_free()

> `readonly` **\_\_wbg\_merkletree\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2409

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_partialsignature\_free()

> `readonly` **\_\_wbg\_partialsignature\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2358

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_policy\_free()

> `readonly` **\_\_wbg\_policy\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2538

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_privatekey\_free()

> `readonly` **\_\_wbg\_privatekey\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2411

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_publickey\_free()

> `readonly` **\_\_wbg\_publickey\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2422

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_randomsecret\_free()

> `readonly` **\_\_wbg\_randomsecret\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2368

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_signature\_free()

> `readonly` **\_\_wbg\_signature\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2438

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_signatureproof\_free()

> `readonly` **\_\_wbg\_signatureproof\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2284

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_stakingcontract\_free()

> `readonly` **\_\_wbg\_stakingcontract\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2470

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_transaction\_free()

> `readonly` **\_\_wbg\_transaction\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2299

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_transactionbuilder\_free()

> `readonly` **\_\_wbg\_transactionbuilder\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2445

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbg\_vestingcontract\_free()

> `readonly` **\_\_wbg\_vestingcontract\_free**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2507

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_\_wbindgen\_exn\_store()

> `readonly` **\_\_wbindgen\_exn\_store**: (`a`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2588

#### Parameters

##### a

`number`

#### Returns

`void`

***

### \_\_wbindgen\_export\_4

> `readonly` **\_\_wbindgen\_export\_4**: `Table`

Defined in: @nimiq/core/types/wasm/web.d.ts:2590

***

### \_\_wbindgen\_export\_5

> `readonly` **\_\_wbindgen\_export\_5**: `Table`

Defined in: @nimiq/core/types/wasm/web.d.ts:2591

***

### \_\_wbindgen\_free()

> `readonly` **\_\_wbindgen\_free**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2592

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### \_\_wbindgen\_malloc()

> `readonly` **\_\_wbindgen\_malloc**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2586

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### \_\_wbindgen\_realloc()

> `readonly` **\_\_wbindgen\_realloc**: (`a`, `b`, `c`, `d`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2587

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

#### Returns

`number`

***

### \_\_wbindgen\_start()

> `readonly` **\_\_wbindgen\_start**: () => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2602

#### Returns

`void`

***

### \_dyn\_core\_\_ops\_\_function\_\_FnMut\_\_\_\_\_Output\_\_\_R\_as\_wasm\_bindgen\_\_closure\_\_WasmClosure\_\_\_describe\_\_invoke\_\_h57a3662dbb3c4669()

> `readonly` **\_dyn\_core\_\_ops\_\_function\_\_FnMut\_\_\_\_\_Output\_\_\_R\_as\_wasm\_bindgen\_\_closure\_\_WasmClosure\_\_\_describe\_\_invoke\_\_h57a3662dbb3c4669**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2597

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### \_dyn\_core\_\_ops\_\_function\_\_FnMut\_\_\_\_\_Output\_\_\_R\_as\_wasm\_bindgen\_\_closure\_\_WasmClosure\_\_\_describe\_\_invoke\_\_hc72e56d240b9010b()

> `readonly` **\_dyn\_core\_\_ops\_\_function\_\_FnMut\_\_\_\_\_Output\_\_\_R\_as\_wasm\_bindgen\_\_closure\_\_WasmClosure\_\_\_describe\_\_invoke\_\_hc72e56d240b9010b**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2598

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### address\_\_\_getClassname()

> `readonly` **address\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2259

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### address\_compare()

> `readonly` **address\_compare**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2271

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### address\_deserialize()

> `readonly` **address\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2262

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### address\_equals()

> `readonly` **address\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2270

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### address\_fromAny()

> `readonly` **address\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2263

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### address\_fromPublicKeys()

> `readonly` **address\_fromPublicKeys**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2266

#### Parameters

##### a

`any`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### address\_fromString()

> `readonly` **address\_fromString**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2264

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### address\_fromUserFriendlyAddress()

> `readonly` **address\_fromUserFriendlyAddress**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2265

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### address\_new()

> `readonly` **address\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2261

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### address\_serialize()

> `readonly` **address\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2269

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### address\_toHex()

> `readonly` **address\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2268

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### address\_toPlain()

> `readonly` **address\_toPlain**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2267

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### address\_toUserFriendlyAddress()

> `readonly` **address\_toUserFriendlyAddress**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2466

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blskeypair\_derive()

> `readonly` **blskeypair\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2512

#### Parameters

##### a

`number`

#### Returns

`number`

***

### blskeypair\_deserialize()

> `readonly` **blskeypair\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2513

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blskeypair\_generate()

> `readonly` **blskeypair\_generate**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2511

#### Returns

`number`

***

### blskeypair\_new()

> `readonly` **blskeypair\_new**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2514

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### blskeypair\_publicKey()

> `readonly` **blskeypair\_publicKey**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2517

#### Parameters

##### a

`number`

#### Returns

`number`

***

### blskeypair\_secretKey()

> `readonly` **blskeypair\_secretKey**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2516

#### Parameters

##### a

`number`

#### Returns

`number`

***

### blskeypair\_serialize()

> `readonly` **blskeypair\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2515

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blskeypair\_toHex()

> `readonly` **blskeypair\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2518

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blspublickey\_derive()

> `readonly` **blspublickey\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2520

#### Parameters

##### a

`number`

#### Returns

`number`

***

### blspublickey\_deserialize()

> `readonly` **blspublickey\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2521

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blspublickey\_fromHex()

> `readonly` **blspublickey\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2523

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blspublickey\_new()

> `readonly` **blspublickey\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2532

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blspublickey\_serialize()

> `readonly` **blspublickey\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2522

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blspublickey\_toHex()

> `readonly` **blspublickey\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2524

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blssecretkey\_deserialize()

> `readonly` **blssecretkey\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2527

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blssecretkey\_fromHex()

> `readonly` **blssecretkey\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2530

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blssecretkey\_generate()

> `readonly` **blssecretkey\_generate**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2526

#### Returns

`number`

***

### blssecretkey\_new()

> `readonly` **blssecretkey\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2528

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### blssecretkey\_serialize()

> `readonly` **blssecretkey\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2529

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### blssecretkey\_toHex()

> `readonly` **blssecretkey\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2531

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### client\_addConsensusChangedListener()

> `readonly` **client\_addConsensusChangedListener**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2481

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_addHeadChangedListener()

> `readonly` **client\_addHeadChangedListener**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2482

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_addPeerChangedListener()

> `readonly` **client\_addPeerChangedListener**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2483

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_addTransactionListener()

> `readonly` **client\_addTransactionListener**: (`a`, `b`, `c`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2484

#### Parameters

##### a

`number`

##### b

`any`

##### c

`any`

#### Returns

`any`

***

### client\_connectNetwork()

> `readonly` **client\_connectNetwork**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2506

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_create()

> `readonly` **client\_create**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2480

#### Parameters

##### a

`any`

#### Returns

`any`

***

### client\_disconnectNetwork()

> `readonly` **client\_disconnectNetwork**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2505

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getAccount()

> `readonly` **client\_getAccount**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2495

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_getAccounts()

> `readonly` **client\_getAccounts**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2496

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_getAddressBook()

> `readonly` **client\_getAddressBook**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2492

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getBlock()

> `readonly` **client\_getBlock**: (`a`, `b`, `c`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2493

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`any`

***

### client\_getBlockAt()

> `readonly` **client\_getBlockAt**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2494

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`any`

***

### client\_getHeadBlock()

> `readonly` **client\_getHeadBlock**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2491

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getHeadHash()

> `readonly` **client\_getHeadHash**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2489

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getHeadHeight()

> `readonly` **client\_getHeadHeight**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2490

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getNetworkId()

> `readonly` **client\_getNetworkId**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2486

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_getStaker()

> `readonly` **client\_getStaker**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2497

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_getStakers()

> `readonly` **client\_getStakers**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2498

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_getTransaction()

> `readonly` **client\_getTransaction**: (`a`, `b`, `c`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2502

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`any`

***

### client\_getTransactionReceiptsByAddress()

> `readonly` **client\_getTransactionReceiptsByAddress**: (`a`, `b`, `c`, `d`, `e`, `f`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2503

#### Parameters

##### a

`number`

##### b

`any`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

#### Returns

`any`

***

### client\_getTransactionsByAddress()

> `readonly` **client\_getTransactionsByAddress**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2504

#### Parameters

##### a

`number`

##### b

`any`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

##### h

`number`

#### Returns

`any`

***

### client\_getValidator()

> `readonly` **client\_getValidator**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2499

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_getValidators()

> `readonly` **client\_getValidators**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2500

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_isConsensusEstablished()

> `readonly` **client\_isConsensusEstablished**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2487

#### Parameters

##### a

`number`

#### Returns

`any`

***

### client\_removeListener()

> `readonly` **client\_removeListener**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2485

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`any`

***

### client\_sendTransaction()

> `readonly` **client\_sendTransaction**: (`a`, `b`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2501

#### Parameters

##### a

`number`

##### b

`any`

#### Returns

`any`

***

### client\_waitForConsensusEstablished()

> `readonly` **client\_waitForConsensusEstablished**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2488

#### Parameters

##### a

`number`

#### Returns

`any`

***

### clientconfiguration\_build()

> `readonly` **clientconfiguration\_build**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2283

#### Parameters

##### a

`number`

#### Returns

`any`

***

### clientconfiguration\_desiredPeerCount()

> `readonly` **clientconfiguration\_desiredPeerCount**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2278

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### clientconfiguration\_logLevel()

> `readonly` **clientconfiguration\_logLevel**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2276

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### clientconfiguration\_network()

> `readonly` **clientconfiguration\_network**: (`a`, `b`, `c`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2274

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

\[`number`, `number`]

***

### clientconfiguration\_new()

> `readonly` **clientconfiguration\_new**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2273

#### Returns

`number`

***

### clientconfiguration\_onlySecureWsConnections()

> `readonly` **clientconfiguration\_onlySecureWsConnections**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2277

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### clientconfiguration\_peerCountMax()

> `readonly` **clientconfiguration\_peerCountMax**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2279

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### clientconfiguration\_peerCountPerIpMax()

> `readonly` **clientconfiguration\_peerCountPerIpMax**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2280

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### clientconfiguration\_peerCountPerSubnetMax()

> `readonly` **clientconfiguration\_peerCountPerSubnetMax**: (`a`, `b`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2281

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`void`

***

### clientconfiguration\_seedNodes()

> `readonly` **clientconfiguration\_seedNodes**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2275

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### clientconfiguration\_syncMode()

> `readonly` **clientconfiguration\_syncMode**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2282

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### closure1749\_externref\_shim()

> `readonly` **closure1749\_externref\_shim**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2596

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

#### Returns

`void`

***

### closure2388\_externref\_shim()

> `readonly` **closure2388\_externref\_shim**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2599

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

#### Returns

`void`

***

### closure2733\_externref\_shim()

> `readonly` **closure2733\_externref\_shim**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2600

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

#### Returns

`void`

***

### closure280\_externref\_shim()

> `readonly` **closure280\_externref\_shim**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2595

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

#### Returns

`void`

***

### closure282\_externref\_shim()

> `readonly` **closure282\_externref\_shim**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2594

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

#### Returns

`void`

***

### closure2922\_externref\_shim()

> `readonly` **closure2922\_externref\_shim**: (`a`, `b`, `c`, `d`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2601

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

##### d

`any`

#### Returns

`void`

***

### commitment\_\_\_getClassname()

> `readonly` **commitment\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2330

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### commitment\_derive()

> `readonly` **commitment\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2334

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitment\_deserialize()

> `readonly` **commitment\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2337

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### commitment\_equals()

> `readonly` **commitment\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2341

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### commitment\_fromAny()

> `readonly` **commitment\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2336

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### commitment\_fromHex()

> `readonly` **commitment\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2339

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### commitment\_new()

> `readonly` **commitment\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2459

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### commitment\_serialize()

> `readonly` **commitment\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2338

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### commitment\_serialized\_size()

> `readonly` **commitment\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2333

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitment\_size()

> `readonly` **commitment\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2332

#### Returns

`number`

***

### commitment\_sum()

> `readonly` **commitment\_sum**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2335

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### commitment\_toHex()

> `readonly` **commitment\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2340

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### commitmentpair\_\_\_getClassname()

> `readonly` **commitmentpair\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2342

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### commitmentpair\_commitment()

> `readonly` **commitmentpair\_commitment**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2355

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitmentpair\_derive()

> `readonly` **commitmentpair\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2349

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitmentpair\_deserialize()

> `readonly` **commitmentpair\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2347

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### commitmentpair\_equals()

> `readonly` **commitmentpair\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2356

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### commitmentpair\_fromAny()

> `readonly` **commitmentpair\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2346

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### commitmentpair\_fromHex()

> `readonly` **commitmentpair\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2352

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### commitmentpair\_generate()

> `readonly` **commitmentpair\_generate**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2348

#### Returns

`number`

***

### commitmentpair\_new()

> `readonly` **commitmentpair\_new**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2350

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### commitmentpair\_secret()

> `readonly` **commitmentpair\_secret**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2354

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitmentpair\_serialize()

> `readonly` **commitmentpair\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2351

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### commitmentpair\_serialized\_size()

> `readonly` **commitmentpair\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2345

#### Parameters

##### a

`number`

#### Returns

`number`

***

### commitmentpair\_size()

> `readonly` **commitmentpair\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2344

#### Returns

`number`

***

### commitmentpair\_toHex()

> `readonly` **commitmentpair\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2353

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### cryptoutils\_computeHmacSha512()

> `readonly` **cryptoutils\_computeHmacSha512**: (`a`, `b`, `c`, `d`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2535

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

#### Returns

\[`number`, `number`]

***

### cryptoutils\_computePBKDF2sha512()

> `readonly` **cryptoutils\_computePBKDF2sha512**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2536

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`, `number`]

***

### cryptoutils\_getRandomValues()

> `readonly` **cryptoutils\_getRandomValues**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2534

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### cryptoutils\_otpKdf()

> `readonly` **cryptoutils\_otpKdf**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2537

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

#### Returns

`any`

***

### es256publickey\_\_\_getClassname()

> `readonly` **es256publickey\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2376

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### es256publickey\_compare()

> `readonly` **es256publickey\_compare**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2388

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### es256publickey\_deserialize()

> `readonly` **es256publickey\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2379

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256publickey\_equals()

> `readonly` **es256publickey\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2387

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### es256publickey\_fromHex()

> `readonly` **es256publickey\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2384

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256publickey\_fromRaw()

> `readonly` **es256publickey\_fromRaw**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2381

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256publickey\_fromSpki()

> `readonly` **es256publickey\_fromSpki**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2380

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256publickey\_new()

> `readonly` **es256publickey\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2382

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256publickey\_serialize()

> `readonly` **es256publickey\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2383

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### es256publickey\_toAddress()

> `readonly` **es256publickey\_toAddress**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2386

#### Parameters

##### a

`number`

#### Returns

`number`

***

### es256publickey\_toHex()

> `readonly` **es256publickey\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2385

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### es256publickey\_verify()

> `readonly` **es256publickey\_verify**: (`a`, `b`, `c`, `d`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2378

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

#### Returns

`number`

***

### es256signature\_\_\_getClassname()

> `readonly` **es256signature\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2389

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### es256signature\_deserialize()

> `readonly` **es256signature\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2391

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256signature\_fromAsn1()

> `readonly` **es256signature\_fromAsn1**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2393

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256signature\_fromHex()

> `readonly` **es256signature\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2394

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### es256signature\_serialize()

> `readonly` **es256signature\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2392

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### es256signature\_toHex()

> `readonly` **es256signature\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2395

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### hash\_computeBlake2b()

> `readonly` **hash\_computeBlake2b**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2474

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### hash\_computeNimiqArgon2d()

> `readonly` **hash\_computeNimiqArgon2d**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2477

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`, `number`]

***

### hash\_computeNimiqArgon2id()

> `readonly` **hash\_computeNimiqArgon2id**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2478

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`, `number`]

***

### hash\_computeSha256()

> `readonly` **hash\_computeSha256**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2475

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### hash\_computeSha512()

> `readonly` **hash\_computeSha512**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2476

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### hashedtimelockedcontract\_dataToPlain()

> `readonly` **hashedtimelockedcontract\_dataToPlain**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2468

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### hashedtimelockedcontract\_proofToPlain()

> `readonly` **hashedtimelockedcontract\_proofToPlain**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2469

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### keypair\_derive()

> `readonly` **keypair\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2398

#### Parameters

##### a

`number`

#### Returns

`number`

***

### keypair\_deserialize()

> `readonly` **keypair\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2400

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### keypair\_fromHex()

> `readonly` **keypair\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2399

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### keypair\_generate()

> `readonly` **keypair\_generate**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2397

#### Returns

`number`

***

### keypair\_new()

> `readonly` **keypair\_new**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2401

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### keypair\_privateKey()

> `readonly` **keypair\_privateKey**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2405

#### Parameters

##### a

`number`

#### Returns

`number`

***

### keypair\_publicKey()

> `readonly` **keypair\_publicKey**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2406

#### Parameters

##### a

`number`

#### Returns

`number`

***

### keypair\_serialize()

> `readonly` **keypair\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2402

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### keypair\_sign()

> `readonly` **keypair\_sign**: (`a`, `b`, `c`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2403

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`number`

***

### keypair\_signTransaction()

> `readonly` **keypair\_signTransaction**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2404

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### keypair\_toAddress()

> `readonly` **keypair\_toAddress**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2407

#### Parameters

##### a

`number`

#### Returns

`number`

***

### keypair\_toHex()

> `readonly` **keypair\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2408

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### memory

> `readonly` **memory**: `Memory`

Defined in: @nimiq/core/types/wasm/web.d.ts:2258

***

### merkletree\_computeRoot()

> `readonly` **merkletree\_computeRoot**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2410

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### partialsignature\_\_\_getClassname()

> `readonly` **partialsignature\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2357

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### partialsignature\_create()

> `readonly` **partialsignature\_create**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2362

#### Parameters

##### a

`number`

##### b

`number`

##### c

`any`

##### d

`any`

##### e

`any`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### partialsignature\_deserialize()

> `readonly` **partialsignature\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2361

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### partialsignature\_equals()

> `readonly` **partialsignature\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2366

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### partialsignature\_fromAny()

> `readonly` **partialsignature\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2360

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### partialsignature\_fromHex()

> `readonly` **partialsignature\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2364

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### partialsignature\_new()

> `readonly` **partialsignature\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2464

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### partialsignature\_serialize()

> `readonly` **partialsignature\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2363

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### partialsignature\_serialized\_size()

> `readonly` **partialsignature\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2359

#### Parameters

##### a

`number`

#### Returns

`number`

***

### partialsignature\_size()

> `readonly` **partialsignature\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2460

#### Returns

`number`

***

### partialsignature\_toHex()

> `readonly` **partialsignature\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2365

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### policy\_batchAt()

> `readonly` **policy\_batchAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2548

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_batchDelayPenalty()

> `readonly` **policy\_batchDelayPenalty**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2568

#### Parameters

##### a

`bigint`

#### Returns

`number`

***

### policy\_batches\_per\_epoch()

> `readonly` **policy\_batches\_per\_epoch**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2541

#### Returns

`number`

***

### policy\_batchIndexAt()

> `readonly` **policy\_batchIndexAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2549

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_blockAfterJail()

> `readonly` **policy\_blockAfterJail**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2566

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_blockAfterReportingWindow()

> `readonly` **policy\_blockAfterReportingWindow**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2565

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_blocks\_per\_batch()

> `readonly` **policy\_blocks\_per\_batch**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2542

#### Returns

`number`

***

### policy\_blocks\_per\_epoch()

> `readonly` **policy\_blocks\_per\_epoch**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2543

#### Returns

`number`

***

### policy\_electionBlockAfter()

> `readonly` **policy\_electionBlockAfter**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2550

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_electionBlockBefore()

> `readonly` **policy\_electionBlockBefore**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2551

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_electionBlockOf()

> `readonly` **policy\_electionBlockOf**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2561

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_epochAt()

> `readonly` **policy\_epochAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2546

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_epochIndexAt()

> `readonly` **policy\_epochIndexAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2547

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_firstBatchOfEpoch()

> `readonly` **policy\_firstBatchOfEpoch**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2563

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_firstBlockOf()

> `readonly` **policy\_firstBlockOf**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2559

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_firstBlockOfBatch()

> `readonly` **policy\_firstBlockOfBatch**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2560

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_genesis\_block\_number()

> `readonly` **policy\_genesis\_block\_number**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2544

#### Returns

`number`

***

### policy\_isElectionBlockAt()

> `readonly` **policy\_isElectionBlockAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2553

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_isMacroBlockAt()

> `readonly` **policy\_isMacroBlockAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2557

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_isMicroBlockAt()

> `readonly` **policy\_isMicroBlockAt**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2558

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_lastBlockOfReportingWindow()

> `readonly` **policy\_lastBlockOfReportingWindow**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2564

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_lastElectionBlock()

> `readonly` **policy\_lastElectionBlock**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2552

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_lastMacroBlock()

> `readonly` **policy\_lastMacroBlock**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2556

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_macroBlockAfter()

> `readonly` **policy\_macroBlockAfter**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2554

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_macroBlockBefore()

> `readonly` **policy\_macroBlockBefore**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2555

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_macroBlockOf()

> `readonly` **policy\_macroBlockOf**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2562

#### Parameters

##### a

`number`

#### Returns

`number`

***

### policy\_state\_chunks\_max\_size()

> `readonly` **policy\_state\_chunks\_max\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2545

#### Returns

`number`

***

### policy\_supplyAt()

> `readonly` **policy\_supplyAt**: (`a`, `b`, `c`) => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2567

#### Parameters

##### a

`bigint`

##### b

`bigint`

##### c

`bigint`

#### Returns

`bigint`

***

### policy\_transaction\_validity\_window()

> `readonly` **policy\_transaction\_validity\_window**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2539

#### Returns

`number`

***

### policy\_transaction\_validity\_window\_blocks()

> `readonly` **policy\_transaction\_validity\_window\_blocks**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2540

#### Returns

`number`

***

### policy\_wasm\_block\_separation\_time()

> `readonly` **policy\_wasm\_block\_separation\_time**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2576

#### Returns

`bigint`

***

### policy\_wasm\_bls\_cache\_max\_capacity()

> `readonly` **policy\_wasm\_bls\_cache\_max\_capacity**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2583

#### Returns

`number`

***

### policy\_wasm\_coinbase\_address()

> `readonly` **policy\_wasm\_coinbase\_address**: () => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2570

#### Returns

\[`number`, `number`]

***

### policy\_wasm\_f\_plus\_one()

> `readonly` **policy\_wasm\_f\_plus\_one**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2574

#### Returns

`number`

***

### policy\_wasm\_history\_chunks\_max\_size()

> `readonly` **policy\_wasm\_history\_chunks\_max\_size**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2584

#### Returns

`bigint`

***

### policy\_wasm\_jail\_epochs()

> `readonly` **policy\_wasm\_jail\_epochs**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2581

#### Returns

`number`

***

### policy\_wasm\_max\_size\_micro\_body()

> `readonly` **policy\_wasm\_max\_size\_micro\_body**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2571

#### Returns

`number`

***

### policy\_wasm\_min\_block\_producer\_timeout()

> `readonly` **policy\_wasm\_min\_block\_producer\_timeout**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2575

#### Returns

`bigint`

***

### policy\_wasm\_min\_epochs\_stored()

> `readonly` **policy\_wasm\_min\_epochs\_stored**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2577

#### Returns

`number`

***

### policy\_wasm\_minimum\_rewards\_percentage()

> `readonly` **policy\_wasm\_minimum\_rewards\_percentage**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2579

#### Returns

`number`

***

### policy\_wasm\_slots()

> `readonly` **policy\_wasm\_slots**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2572

#### Returns

`number`

***

### policy\_wasm\_staking\_contract\_address()

> `readonly` **policy\_wasm\_staking\_contract\_address**: () => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2569

#### Returns

\[`number`, `number`]

***

### policy\_wasm\_timestamp\_max\_drift()

> `readonly` **policy\_wasm\_timestamp\_max\_drift**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2578

#### Returns

`bigint`

***

### policy\_wasm\_total\_supply()

> `readonly` **policy\_wasm\_total\_supply**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2582

#### Returns

`bigint`

***

### policy\_wasm\_two\_f\_plus\_one()

> `readonly` **policy\_wasm\_two\_f\_plus\_one**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2573

#### Returns

`number`

***

### policy\_wasm\_validator\_deposit()

> `readonly` **policy\_wasm\_validator\_deposit**: () => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2580

#### Returns

`bigint`

***

### policy\_wasm\_version()

> `readonly` **policy\_wasm\_version**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2585

#### Returns

`number`

***

### privatekey\_deserialize()

> `readonly` **privatekey\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2415

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### privatekey\_equals()

> `readonly` **privatekey\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2420

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### privatekey\_fromHex()

> `readonly` **privatekey\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2418

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### privatekey\_generate()

> `readonly` **privatekey\_generate**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2414

#### Returns

`number`

***

### privatekey\_new()

> `readonly` **privatekey\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2416

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### privatekey\_purpose\_id()

> `readonly` **privatekey\_purpose\_id**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2412

#### Returns

`number`

***

### privatekey\_serialize()

> `readonly` **privatekey\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2417

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### privatekey\_serialized\_size()

> `readonly` **privatekey\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2413

#### Parameters

##### a

`number`

#### Returns

`number`

***

### privatekey\_size()

> `readonly` **privatekey\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2462

#### Returns

`number`

***

### privatekey\_toHex()

> `readonly` **privatekey\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2419

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### publickey\_\_\_getClassname()

> `readonly` **publickey\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2421

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### publickey\_compare()

> `readonly` **publickey\_compare**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2436

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### publickey\_derive()

> `readonly` **publickey\_derive**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2424

#### Parameters

##### a

`number`

#### Returns

`number`

***

### publickey\_deserialize()

> `readonly` **publickey\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2427

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_equals()

> `readonly` **publickey\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2435

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### publickey\_fromAny()

> `readonly` **publickey\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2425

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_fromHex()

> `readonly` **publickey\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2432

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_fromRaw()

> `readonly` **publickey\_fromRaw**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2429

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_fromSpki()

> `readonly` **publickey\_fromSpki**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2428

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_new()

> `readonly` **publickey\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2430

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### publickey\_serialize()

> `readonly` **publickey\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2431

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### publickey\_serialized\_size()

> `readonly` **publickey\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2423

#### Parameters

##### a

`number`

#### Returns

`number`

***

### publickey\_size()

> `readonly` **publickey\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2463

#### Returns

`number`

***

### publickey\_toAddress()

> `readonly` **publickey\_toAddress**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2434

#### Parameters

##### a

`number`

#### Returns

`number`

***

### publickey\_toHex()

> `readonly` **publickey\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2433

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### publickey\_verify()

> `readonly` **publickey\_verify**: (`a`, `b`, `c`, `d`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2426

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

#### Returns

`number`

***

### randomsecret\_\_\_getClassname()

> `readonly` **randomsecret\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2367

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### randomsecret\_deserialize()

> `readonly` **randomsecret\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2371

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### randomsecret\_equals()

> `readonly` **randomsecret\_equals**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2375

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### randomsecret\_fromAny()

> `readonly` **randomsecret\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2370

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### randomsecret\_fromHex()

> `readonly` **randomsecret\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2373

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### randomsecret\_new()

> `readonly` **randomsecret\_new**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2465

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### randomsecret\_serialize()

> `readonly` **randomsecret\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2372

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### randomsecret\_serialized\_size()

> `readonly` **randomsecret\_serialized\_size**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2369

#### Parameters

##### a

`number`

#### Returns

`number`

***

### randomsecret\_size()

> `readonly` **randomsecret\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2461

#### Returns

`number`

***

### randomsecret\_toHex()

> `readonly` **randomsecret\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2374

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### signature\_\_\_getClassname()

> `readonly` **signature\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2437

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### signature\_create()

> `readonly` **signature\_create**: (`a`, `b`, `c`, `d`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2441

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

#### Returns

`number`

***

### signature\_deserialize()

> `readonly` **signature\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2439

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signature\_fromAsn1()

> `readonly` **signature\_fromAsn1**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2442

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signature\_fromHex()

> `readonly` **signature\_fromHex**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2443

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signature\_serialize()

> `readonly` **signature\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2440

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### signature\_toHex()

> `readonly` **signature\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2444

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### signatureproof\_deserialize()

> `readonly` **signatureproof\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2297

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signatureproof\_es256\_single\_sig\_size()

> `readonly` **signatureproof\_es256\_single\_sig\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2286

#### Returns

`number`

***

### signatureproof\_isSignedBy()

> `readonly` **signatureproof\_isSignedBy**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2292

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### signatureproof\_multiSig()

> `readonly` **signatureproof\_multiSig**: (`a`, `b`, `c`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2288

#### Parameters

##### a

`number`

##### b

`any`

##### c

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signatureproof\_publicKey()

> `readonly` **signatureproof\_publicKey**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2294

#### Parameters

##### a

`number`

#### Returns

`any`

***

### signatureproof\_serialize()

> `readonly` **signatureproof\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2295

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### signatureproof\_signature()

> `readonly` **signatureproof\_signature**: (`a`) => `any`

Defined in: @nimiq/core/types/wasm/web.d.ts:2293

#### Parameters

##### a

`number`

#### Returns

`any`

***

### signatureproof\_single\_sig\_size()

> `readonly` **signatureproof\_single\_sig\_size**: () => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2285

#### Returns

`number`

***

### signatureproof\_singleSig()

> `readonly` **signatureproof\_singleSig**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2287

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### signatureproof\_toPlain()

> `readonly` **signatureproof\_toPlain**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2296

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signatureproof\_verify()

> `readonly` **signatureproof\_verify**: (`a`, `b`, `c`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2291

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`number`

***

### signatureproof\_webauthnMultiSig()

> `readonly` **signatureproof\_webauthnMultiSig**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2290

#### Parameters

##### a

`any`

##### b

`any`

##### c

`any`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### signatureproof\_webauthnSingleSig()

> `readonly` **signatureproof\_webauthnSingleSig**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2289

#### Parameters

##### a

`any`

##### b

`any`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`]

***

### stakingcontract\_dataToPlain()

> `readonly` **stakingcontract\_dataToPlain**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2471

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### stakingcontract\_proofToPlain()

> `readonly` **stakingcontract\_proofToPlain**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2472

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_\_\_getClassname()

> `readonly` **transaction\_\_\_getClassname**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2298

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_data()

> `readonly` **transaction\_data**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2319

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_deserialize()

> `readonly` **transaction\_deserialize**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2327

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_fee()

> `readonly` **transaction\_fee**: (`a`) => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2314

#### Parameters

##### a

`number`

#### Returns

`bigint`

***

### transaction\_feePerByte()

> `readonly` **transaction\_feePerByte**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2315

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_flags()

> `readonly` **transaction\_flags**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2318

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_format()

> `readonly` **transaction\_format**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2308

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_fromAny()

> `readonly` **transaction\_fromAny**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2328

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_fromPlain()

> `readonly` **transaction\_fromPlain**: (`a`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2329

#### Parameters

##### a

`any`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_getContractCreationAddress()

> `readonly` **transaction\_getContractCreationAddress**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2305

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_hash()

> `readonly` **transaction\_hash**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2302

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_isValidAt()

> `readonly` **transaction\_isValidAt**: (`a`, `b`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2304

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

`number`

***

### transaction\_networkId()

> `readonly` **transaction\_networkId**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2317

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_new()

> `readonly` **transaction\_new**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`, `j`, `k`, `l`, `m`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2300

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

##### h

`number`

##### i

`bigint`

##### j

`bigint`

##### k

`number`

##### l

`number`

##### m

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_proof()

> `readonly` **transaction\_proof**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2322

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_recipient()

> `readonly` **transaction\_recipient**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2311

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_recipientType()

> `readonly` **transaction\_recipientType**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2312

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_sender()

> `readonly` **transaction\_sender**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2309

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_senderData()

> `readonly` **transaction\_senderData**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2321

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_senderType()

> `readonly` **transaction\_senderType**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2310

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_serialize()

> `readonly` **transaction\_serialize**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2307

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_serializeContent()

> `readonly` **transaction\_serializeContent**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2306

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_serializedSize()

> `readonly` **transaction\_serializedSize**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2324

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_set\_data()

> `readonly` **transaction\_set\_data**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2320

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### transaction\_set\_proof()

> `readonly` **transaction\_set\_proof**: (`a`, `b`, `c`) => `void`

Defined in: @nimiq/core/types/wasm/web.d.ts:2323

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

#### Returns

`void`

***

### transaction\_sign()

> `readonly` **transaction\_sign**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2301

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_toHex()

> `readonly` **transaction\_toHex**: (`a`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2325

#### Parameters

##### a

`number`

#### Returns

\[`number`, `number`]

***

### transaction\_toPlain()

> `readonly` **transaction\_toPlain**: (`a`, `b`, `c`, `d`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2326

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`bigint`

#### Returns

\[`number`, `number`, `number`]

***

### transaction\_validityStartHeight()

> `readonly` **transaction\_validityStartHeight**: (`a`) => `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:2316

#### Parameters

##### a

`number`

#### Returns

`number`

***

### transaction\_value()

> `readonly` **transaction\_value**: (`a`) => `bigint`

Defined in: @nimiq/core/types/wasm/web.d.ts:2313

#### Parameters

##### a

`number`

#### Returns

`bigint`

***

### transaction\_verify()

> `readonly` **transaction\_verify**: (`a`, `b`) => \[`number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2303

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`]

***

### transactionbuilder\_newAddStake()

> `readonly` **transactionbuilder\_newAddStake**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2449

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

##### d

`number`

##### e

`bigint`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newBasic()

> `readonly` **transactionbuilder\_newBasic**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2446

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

##### d

`number`

##### e

`bigint`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newBasicWithData()

> `readonly` **transactionbuilder\_newBasicWithData**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2447

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`bigint`

##### f

`number`

##### g

`bigint`

##### h

`number`

##### i

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newCreateStaker()

> `readonly` **transactionbuilder\_newCreateStaker**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2448

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

##### d

`number`

##### e

`bigint`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newCreateValidator()

> `readonly` **transactionbuilder\_newCreateValidator**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`, `j`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2454

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

##### h

`bigint`

##### i

`number`

##### j

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newDeactivateValidator()

> `readonly` **transactionbuilder\_newDeactivateValidator**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2456

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`bigint`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newDeleteValidator()

> `readonly` **transactionbuilder\_newDeleteValidator**: (`a`, `b`, `c`, `d`, `e`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2457

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

##### d

`number`

##### e

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newRemoveStake()

> `readonly` **transactionbuilder\_newRemoveStake**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2453

#### Parameters

##### a

`number`

##### b

`bigint`

##### c

`number`

##### d

`bigint`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newRetireStake()

> `readonly` **transactionbuilder\_newRetireStake**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2452

#### Parameters

##### a

`number`

##### b

`bigint`

##### c

`number`

##### d

`bigint`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newRetireValidator()

> `readonly` **transactionbuilder\_newRetireValidator**: (`a`, `b`, `c`, `d`, `e`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2458

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

##### d

`number`

##### e

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newSetActiveStake()

> `readonly` **transactionbuilder\_newSetActiveStake**: (`a`, `b`, `c`, `d`, `e`, `f`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2451

#### Parameters

##### a

`number`

##### b

`bigint`

##### c

`number`

##### d

`bigint`

##### e

`number`

##### f

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newUpdateStaker()

> `readonly` **transactionbuilder\_newUpdateStaker**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2450

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`bigint`

##### f

`number`

##### g

`number`

#### Returns

\[`number`, `number`, `number`]

***

### transactionbuilder\_newUpdateValidator()

> `readonly` **transactionbuilder\_newUpdateValidator**: (`a`, `b`, `c`, `d`, `e`, `f`, `g`, `h`, `i`, `j`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2455

#### Parameters

##### a

`number`

##### b

`number`

##### c

`number`

##### d

`number`

##### e

`number`

##### f

`number`

##### g

`number`

##### h

`bigint`

##### i

`number`

##### j

`number`

#### Returns

\[`number`, `number`, `number`]

***

### vestingcontract\_dataToPlain()

> `readonly` **vestingcontract\_dataToPlain**: (`a`, `b`, `c`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2508

#### Parameters

##### a

`number`

##### b

`number`

##### c

`bigint`

#### Returns

\[`number`, `number`, `number`]

***

### vestingcontract\_proofToPlain()

> `readonly` **vestingcontract\_proofToPlain**: (`a`, `b`) => \[`number`, `number`, `number`]

Defined in: @nimiq/core/types/wasm/web.d.ts:2509

#### Parameters

##### a

`number`

##### b

`number`

#### Returns

\[`number`, `number`, `number`]

---

---
url: /build/web-client/reference/interfaces/PlainAddStakeData.md
---
[@nimiq/core](../globals.md) / PlainAddStakeData

# Interface: PlainAddStakeData

Defined in: @nimiq/core/types/wasm/web.d.ts:121

JSON-compatible and human-readable format of add stake data.

## Properties

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:122

***

### staker

> **staker**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:123

---

---
url: /build/web-client/reference/interfaces/PlainBasicAccount.md
---
[@nimiq/core](../globals.md) / PlainBasicAccount

# Interface: PlainBasicAccount

Defined in: @nimiq/core/types/wasm/web.d.ts:348

## Properties

### balance

> **balance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:349

---

---
url: /build/web-client/reference/interfaces/PlainBlockCommonFields.md
---
[@nimiq/core](../globals.md) / PlainBlockCommonFields

# Interface: PlainBlockCommonFields

Defined in: @nimiq/core/types/wasm/web.d.ts:494

JSON-compatible and human-readable format of blocks.

## Extended by

* [`PlainMacroBlock`](PlainMacroBlock.md)
* [`PlainMicroBlock`](PlainMicroBlock.md)

## Properties

### batch

> **batch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:510

The batch number that the block is in.

***

### bodyHash

> **bodyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:551

The root of the Merkle tree of the body, in HEX format. It acts as a commitment to the body.

***

### epoch

> **epoch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:514

The epoch number that the block is in.

***

### extraData

> **extraData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:543

The extra data of the block, in HEX format. Up to 32 raw bytes.

In the genesis block, it encodes the initial supply as a big-endian `u64`.

No planned use otherwise.

***

### hash

> **hash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:498

The block's unique hash, used as its identifier, in HEX format.

***

### height

> **height**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:506

The block's block height, also called block number.

***

### historyHash

> **historyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:555

A Merkle root over all of the transactions that happened in the current epoch, in HEX format.

***

### network

> **network**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:522

The network that this block is valid for.

***

### prevHash

> **prevHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:530

The hash of the header of the immediately preceding block (either micro or macro), in HEX format.

***

### seed

> **seed**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:535

The seed of the block. This is the BLS signature of the seed of the immediately preceding
block (either micro or macro) using the validator key of the block producer.

***

### size

> **size**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:502

The block's on-chain size, in bytes.

***

### stateHash

> **stateHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:547

The root of the Merkle tree of the blockchain state, in HEX format. It acts as a commitment to the state.

***

### timestamp

> **timestamp**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:518

The timestamp of the block. It follows the Unix time and has millisecond precision.

***

### version

> **version**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:526

The protocol version that this block is valid for.

---

---
url: /build/web-client/reference/interfaces/PlainClientConfiguration.md
---
[@nimiq/core](../globals.md) / PlainClientConfiguration

# Interface: PlainClientConfiguration

Defined in: @nimiq/core/types/wasm/web.d.ts:23

## Properties

### desiredPeerCount?

> `optional` **desiredPeerCount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:28

***

### logLevel?

> `optional` **logLevel**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:26

***

### networkId?

> `optional` **networkId**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:24

***

### numInitialConnections?

> `optional` **numInitialConnections**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:33

***

### onlySecureWsConnections?

> `optional` **onlySecureWsConnections**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:27

***

### peerCountMax?

> `optional` **peerCountMax**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:29

***

### peerCountPerIpMax?

> `optional` **peerCountPerIpMax**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:30

***

### peerCountPerSubnetMax?

> `optional` **peerCountPerSubnetMax**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:31

***

### seedNodes?

> `optional` **seedNodes**: `string`\[]

Defined in: @nimiq/core/types/wasm/web.d.ts:25

***

### syncMode?

> `optional` **syncMode**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:32

---

---
url: /build/web-client/reference/interfaces/PlainCreateStakerData.md
---
[@nimiq/core](../globals.md) / PlainCreateStakerData

# Interface: PlainCreateStakerData

Defined in: @nimiq/core/types/wasm/web.d.ts:113

JSON-compatible and human-readable format of staker creation data.

## Properties

### delegation

> **delegation**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:115

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:114

---

---
url: /build/web-client/reference/interfaces/PlainCreateValidatorData.md
---
[@nimiq/core](../globals.md) / PlainCreateValidatorData

# Interface: PlainCreateValidatorData

Defined in: @nimiq/core/types/wasm/web.d.ts:80

JSON-compatible and human-readable format of validator creation data.

## Properties

### proofOfKnowledge

> **proofOfKnowledge**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:86

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:81

***

### rewardAddress

> **rewardAddress**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:84

***

### signalData

> **signalData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:85

***

### signingKey

> **signingKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:82

***

### votingKey

> **votingKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:83

---

---
url: /build/web-client/reference/interfaces/PlainHtlcContract.md
---
[@nimiq/core](../globals.md) / PlainHtlcContract

# Interface: PlainHtlcContract

Defined in: @nimiq/core/types/wasm/web.d.ts:361

## Properties

### balance

> **balance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:362

***

### hashAlgorithm

> **hashAlgorithm**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:365

***

### hashCount

> **hashCount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:367

***

### hashRoot

> **hashRoot**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:366

***

### recipient

> **recipient**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:364

***

### sender

> **sender**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:363

***

### timeout

> **timeout**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:368

***

### totalAmount

> **totalAmount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:369

---

---
url: /build/web-client/reference/interfaces/PlainHtlcData.md
---
[@nimiq/core](../globals.md) / PlainHtlcData

# Interface: PlainHtlcData

Defined in: @nimiq/core/types/wasm/web.d.ts:67

JSON-compatible and human-readable format of HTLC creation data.

## Properties

### hashAlgorithm

> **hashAlgorithm**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:71

***

### hashCount

> **hashCount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:73

***

### hashRoot

> **hashRoot**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:72

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:68

***

### recipient

> **recipient**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:70

***

### sender

> **sender**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:69

***

### timeout

> **timeout**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:74

---

---
url: /build/web-client/reference/interfaces/PlainHtlcEarlyResolveProof.md
---
[@nimiq/core](../globals.md) / PlainHtlcEarlyResolveProof

# Interface: PlainHtlcEarlyResolveProof

Defined in: @nimiq/core/types/wasm/web.d.ts:209

JSON-compatible and human-readable format of HTLC early resolve proofs.

## Properties

### creator

> **creator**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:221

The creator (also called the "sender") of the HTLC

***

### creatorPathLength

> **creatorPathLength**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:224

***

### creatorPublicKey

> **creatorPublicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:223

***

### creatorSignature

> **creatorSignature**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:222

***

### pathLength

> **pathLength**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:217

***

### publicKey

> **publicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:216

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:210

***

### signature

> **signature**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:215

***

### signer

> **signer**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:214

The signer (also called the "recipient") of the HTLC

---

---
url: /build/web-client/reference/interfaces/PlainHtlcRegularTransferProof.md
---
[@nimiq/core](../globals.md) / PlainHtlcRegularTransferProof

# Interface: PlainHtlcRegularTransferProof

Defined in: @nimiq/core/types/wasm/web.d.ts:177

JSON-compatible and human-readable format of HTLC transfer proofs.

## Properties

### hashAlgorithm

> **hashAlgorithm**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:179

***

### hashDepth

> **hashDepth**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:180

***

### hashRoot

> **hashRoot**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:181

***

### pathLength

> **pathLength**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:189

***

### preImage

> **preImage**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:182

***

### publicKey

> **publicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:188

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:178

***

### signature

> **signature**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:187

***

### signer

> **signer**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:186

The signer (also called the "recipient") of the HTLC

---

---
url: /build/web-client/reference/interfaces/PlainHtlcTimeoutResolveProof.md
---
[@nimiq/core](../globals.md) / PlainHtlcTimeoutResolveProof

# Interface: PlainHtlcTimeoutResolveProof

Defined in: @nimiq/core/types/wasm/web.d.ts:195

JSON-compatible and human-readable format of HTLC timeout proofs.

## Properties

### creator

> **creator**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:200

The creator (also called the "sender") of the HTLC

***

### creatorPathLength

> **creatorPathLength**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:203

***

### creatorPublicKey

> **creatorPublicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:202

***

### creatorSignature

> **creatorSignature**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:201

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:196

---

---
url: /build/web-client/reference/interfaces/PlainMacroBlock.md
---
[@nimiq/core](../globals.md) / PlainMacroBlock

# Interface: PlainMacroBlock

Defined in: @nimiq/core/types/wasm/web.d.ts:558

JSON-compatible and human-readable format of blocks.

## Extends

* [`PlainBlockCommonFields`](PlainBlockCommonFields.md)

## Properties

### batch

> **batch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:510

The batch number that the block is in.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`batch`](PlainBlockCommonFields.md#batch)

***

### bodyHash

> **bodyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:551

The root of the Merkle tree of the body, in HEX format. It acts as a commitment to the body.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`bodyHash`](PlainBlockCommonFields.md#bodyhash)

***

### epoch

> **epoch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:514

The epoch number that the block is in.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`epoch`](PlainBlockCommonFields.md#epoch)

***

### extraData

> **extraData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:543

The extra data of the block, in HEX format. Up to 32 raw bytes.

In the genesis block, it encodes the initial supply as a big-endian `u64`.

No planned use otherwise.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`extraData`](PlainBlockCommonFields.md#extradata)

***

### hash

> **hash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:498

The block's unique hash, used as its identifier, in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`hash`](PlainBlockCommonFields.md#hash)

***

### height

> **height**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:506

The block's block height, also called block number.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`height`](PlainBlockCommonFields.md#height)

***

### historyHash

> **historyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:555

A Merkle root over all of the transactions that happened in the current epoch, in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`historyHash`](PlainBlockCommonFields.md#historyhash)

***

### isElectionBlock

> **isElectionBlock**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:562

If true, this macro block is an election block finalizing an epoch.

***

### network

> **network**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:522

The network that this block is valid for.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`network`](PlainBlockCommonFields.md#network)

***

### prevElectionHash

> **prevElectionHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:570

The hash of the header of the preceding election macro block, in HEX format.

***

### prevHash

> **prevHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:530

The hash of the header of the immediately preceding block (either micro or macro), in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`prevHash`](PlainBlockCommonFields.md#prevhash)

***

### round

> **round**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:566

The round number this block was proposed in.

***

### seed

> **seed**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:535

The seed of the block. This is the BLS signature of the seed of the immediately preceding
block (either micro or macro) using the validator key of the block producer.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`seed`](PlainBlockCommonFields.md#seed)

***

### size

> **size**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:502

The block's on-chain size, in bytes.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`size`](PlainBlockCommonFields.md#size)

***

### stateHash

> **stateHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:547

The root of the Merkle tree of the blockchain state, in HEX format. It acts as a commitment to the state.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`stateHash`](PlainBlockCommonFields.md#statehash)

***

### timestamp

> **timestamp**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:518

The timestamp of the block. It follows the Unix time and has millisecond precision.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`timestamp`](PlainBlockCommonFields.md#timestamp)

***

### version

> **version**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:526

The protocol version that this block is valid for.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`version`](PlainBlockCommonFields.md#version)

---

---
url: /build/web-client/reference/interfaces/PlainMicroBlock.md
---
[@nimiq/core](../globals.md) / PlainMicroBlock

# Interface: PlainMicroBlock

Defined in: @nimiq/core/types/wasm/web.d.ts:573

JSON-compatible and human-readable format of blocks.

## Extends

* [`PlainBlockCommonFields`](PlainBlockCommonFields.md)

## Properties

### batch

> **batch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:510

The batch number that the block is in.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`batch`](PlainBlockCommonFields.md#batch)

***

### bodyHash

> **bodyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:551

The root of the Merkle tree of the body, in HEX format. It acts as a commitment to the body.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`bodyHash`](PlainBlockCommonFields.md#bodyhash)

***

### epoch

> **epoch**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:514

The epoch number that the block is in.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`epoch`](PlainBlockCommonFields.md#epoch)

***

### extraData

> **extraData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:543

The extra data of the block, in HEX format. Up to 32 raw bytes.

In the genesis block, it encodes the initial supply as a big-endian `u64`.

No planned use otherwise.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`extraData`](PlainBlockCommonFields.md#extradata)

***

### hash

> **hash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:498

The block's unique hash, used as its identifier, in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`hash`](PlainBlockCommonFields.md#hash)

***

### height

> **height**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:506

The block's block height, also called block number.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`height`](PlainBlockCommonFields.md#height)

***

### historyHash

> **historyHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:555

A Merkle root over all of the transactions that happened in the current epoch, in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`historyHash`](PlainBlockCommonFields.md#historyhash)

***

### network

> **network**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:522

The network that this block is valid for.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`network`](PlainBlockCommonFields.md#network)

***

### prevHash

> **prevHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:530

The hash of the header of the immediately preceding block (either micro or macro), in HEX format.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`prevHash`](PlainBlockCommonFields.md#prevhash)

***

### seed

> **seed**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:535

The seed of the block. This is the BLS signature of the seed of the immediately preceding
block (either micro or macro) using the validator key of the block producer.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`seed`](PlainBlockCommonFields.md#seed)

***

### size

> **size**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:502

The block's on-chain size, in bytes.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`size`](PlainBlockCommonFields.md#size)

***

### stateHash

> **stateHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:547

The root of the Merkle tree of the blockchain state, in HEX format. It acts as a commitment to the state.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`stateHash`](PlainBlockCommonFields.md#statehash)

***

### timestamp

> **timestamp**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:518

The timestamp of the block. It follows the Unix time and has millisecond precision.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`timestamp`](PlainBlockCommonFields.md#timestamp)

***

### version

> **version**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:526

The protocol version that this block is valid for.

#### Inherited from

[`PlainBlockCommonFields`](PlainBlockCommonFields.md).[`version`](PlainBlockCommonFields.md#version)

---

---
url: /build/web-client/reference/interfaces/PlainPeerInfo.md
---
[@nimiq/core](../globals.md) / PlainPeerInfo

# Interface: PlainPeerInfo

Defined in: @nimiq/core/types/wasm/web.d.ts:580

Information about a networking peer.

## Properties

### address

> **address**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:588

Address of the peer in `Multiaddr` format

***

### peerId

> **peerId**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:584

A libp2p peer ID

***

### services

> **services**: [`PlainService`](../type-aliases/PlainService.md)\[]

Defined in: @nimiq/core/types/wasm/web.d.ts:596

List of services the peer is providing

***

### type

> **type**: `"full"` | `"history"` | `"light"`

Defined in: @nimiq/core/types/wasm/web.d.ts:592

Node type of the peer

---

---
url: /build/web-client/reference/interfaces/PlainRawData.md
---
[@nimiq/core](../globals.md) / PlainRawData

# Interface: PlainRawData

Defined in: @nimiq/core/types/wasm/web.d.ts:49

Placeholder struct to serialize data of transactions as hex strings in the style of the Nimiq 1.0 library.

## Properties

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:50

---

---
url: /build/web-client/reference/interfaces/PlainRawProof.md
---
[@nimiq/core](../globals.md) / PlainRawProof

# Interface: PlainRawProof

Defined in: @nimiq/core/types/wasm/web.d.ts:159

Placeholder struct to serialize a raw proof of transactions, also works for empty/unset proofs

## Properties

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:160

---

---
url: /build/web-client/reference/interfaces/PlainRetireStakeData.md
---
[@nimiq/core](../globals.md) / PlainRetireStakeData

# Interface: PlainRetireStakeData

Defined in: @nimiq/core/types/wasm/web.d.ts:146

JSON-compatible and human-readable format of retire stake data.

## Properties

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:147

***

### retireStake

> **retireStake**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:148

---

---
url: /build/web-client/reference/interfaces/PlainSetActiveStakeData.md
---
[@nimiq/core](../globals.md) / PlainSetActiveStakeData

# Interface: PlainSetActiveStakeData

Defined in: @nimiq/core/types/wasm/web.d.ts:138

JSON-compatible and human-readable format of set active stake data.

## Properties

### newActiveBalance

> **newActiveBalance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:140

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:139

---

---
url: /build/web-client/reference/interfaces/PlainStaker.md
---
[@nimiq/core](../globals.md) / PlainStaker

# Interface: PlainStaker

Defined in: @nimiq/core/types/wasm/web.d.ts:385

JSON-compatible and human-readable format of a staker. E.g. delegation addresses are presented in their
human-readable format.

## Properties

### balance

> **balance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:389

The staker's active balance.

***

### delegation

> **delegation**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:394

The address of the validator for which the staker is delegating its stake for. If it is not
delegating to any validator, this will be set to None.

***

### inactiveBalance

> **inactiveBalance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:401

The staker's inactive balance. Only released inactive balance can be withdrawn from the staking contract.
Stake can only be re-delegated if the whole balance of the staker is inactive and released
(or if there was no prior delegation). For inactive balance to be released, the maximum of
the inactive and the validator's jailed periods must have passed.

***

### inactiveFrom

> **inactiveFrom**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:409

The block number at which the inactive balance was last inactivated.
If the stake is currently delegated to a jailed validator, the maximum of its jail release
and the inactive release is taken. Re-delegation requires the whole balance of the staker to be inactive.
The stake can only effectively become inactive on the next election block. Thus, this may contain a
future block height.

***

### inactiveRelease

> **inactiveRelease**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:415

The block number from which the staker's `inactive_balance` gets released, e.g. for retirement.
Re-delegation requires the whole balance of the staker to be inactive and released, as well as
its delegated validator to not currently be jailed.

***

### retiredBalance

> **retiredBalance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:422

The staker's retired balance. Retired balance can only be withdrawn, thus retiring is irreversible.
Only released inactive balance can be retired, so the maximum of the inactive and the validator's jailed
periods must have passed.
Once retired, the funds are immediately available to be withdrawn (removed).

---

---
url: /build/web-client/reference/interfaces/PlainStakingContract.md
---
[@nimiq/core](../globals.md) / PlainStakingContract

# Interface: PlainStakingContract

Defined in: @nimiq/core/types/wasm/web.d.ts:372

## Properties

### activeValidators

> **activeValidators**: \[`string`, `number`]\[]

Defined in: @nimiq/core/types/wasm/web.d.ts:374

***

### balance

> **balance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:373

***

### currentEpochDisabledSlots

> **currentEpochDisabledSlots**: \[`string`, `number`\[]]\[]

Defined in: @nimiq/core/types/wasm/web.d.ts:375

***

### previousDisabledSlots

> **previousDisabledSlots**: `number`\[]

Defined in: @nimiq/core/types/wasm/web.d.ts:376

---

---
url: /build/web-client/reference/interfaces/PlainStandardProof.md
---
[@nimiq/core](../globals.md) / PlainStandardProof

# Interface: PlainStandardProof

Defined in: @nimiq/core/types/wasm/web.d.ts:166

JSON-compatible and human-readable format of standard transaction proofs.

## Properties

### pathLength

> **pathLength**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:171

***

### publicKey

> **publicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:169

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:167

***

### signature

> **signature**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:168

***

### signer

> **signer**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:170

---

---
url: /build/web-client/reference/interfaces/PlainTransaction.md
---
[@nimiq/core](../globals.md) / PlainTransaction

# Interface: PlainTransaction

Defined in: @nimiq/core/types/wasm/web.d.ts:232

JSON-compatible and human-readable format of transactions. E.g. addresses are presented in their human-readable
format and address types and the network are represented as strings. Data and proof are serialized as an object
describing their contents (not yet implemented, only the `{ raw: string }` fallback is available).

## Extended by

* [`PlainTransactionDetails`](PlainTransactionDetails.md)

## Properties

### data

> **data**: [`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:297

The `data` field of a transaction serves different purposes based on the transaction's recipient type.
For transactions to "basic" address types, this field can contain up to 64 bytes of unstructured data.
For transactions that create contracts or interact with the staking contract, the format of this field
must follow a fixed structure and defines the new contracts' properties or how the staking contract is
changed.

***

### fee

> **fee**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:267

The transaction's fee in luna (NIM's smallest unit).

***

### feePerByte

> **feePerByte**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:271

The transaction's fee-per-byte in luna (NIM's smallest unit).

***

### flags

> **flags**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:284

Any flags that this transaction carries. `0b1 = 1` means it's a contract-creation transaction, `0b10 = 2`
means it's a signalling transaction with 0 value.

***

### format

> **format**: `PlainTransactionFormat`

Defined in: @nimiq/core/types/wasm/web.d.ts:244

The transaction's format. Nimiq transactions can have one of two formats: "basic" and "extended".
Basic transactions are simple value transfers between two regular address types and cannot contain
any extra data. Basic transactions can be serialized to less bytes, so take up less place on the
blockchain. Extended transactions on the other hand are all other transactions: contract creations
and interactions, staking transactions, transactions with exta data, etc.

***

### network

> **network**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:279

The network name on which this transaction is valid.

***

### proof

> **proof**: [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:303

The `proof` field contains the signature of the eligible signer. The proof field's structure depends on
the transaction's sender type. For transactions from contracts it can also contain additional structured
data before the signature.

***

### recipient

> **recipient**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:257

The transaction's recipient address in human-readable IBAN format.

***

### recipientType

> **recipientType**: `PlainAccountType`

Defined in: @nimiq/core/types/wasm/web.d.ts:262

The account type of the transaction's recipient. "basic" are regular private-key controlled accounts,
"vesting" and "htlc" are contracts, and "staking" is the staking contract.

***

### sender

> **sender**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:248

The transaction's sender address in human-readable IBAN format.

***

### senderData?

> `optional` **senderData**: [`PlainTransactionSenderData`](../type-aliases/PlainTransactionSenderData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:289

The `sender_data` field serves a purpose based on the transaction's sender type.
It is currently only used for extra information in transactions from the staking contract.

***

### senderType

> **senderType**: `PlainAccountType`

Defined in: @nimiq/core/types/wasm/web.d.ts:253

The account type of the transaction's sender. "basic" are regular private-key controlled accounts,
"vesting" and "htlc" are contracts, and "staking" is the staking contract.

***

### size

> **size**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:308

The transaction's serialized size in bytes. It is used to determine the fee-per-byte that this
transaction pays.

***

### transactionHash

> **transactionHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:236

The transaction's unique hash, used as its identifier. Sometimes also called `txId`.

***

### valid

> **valid**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:313

Encodes if the transaction is valid, meaning the signature is valid and the `data` and `proof` fields
follow the correct format for the transaction's recipient and sender type, respectively.

***

### validityStartHeight

> **validityStartHeight**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:275

The block height at which this transaction becomes valid. It is then valid for 7200 blocks (~2 hours).

***

### value

> **value**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:263

---

---
url: /build/web-client/reference/interfaces/PlainTransactionDetails.md
---
[@nimiq/core](../globals.md) / PlainTransactionDetails

# Interface: PlainTransactionDetails

Defined in: @nimiq/core/types/wasm/web.d.ts:326

JSON-compatible and human-readable format of transactions, including details about its state in the
blockchain. Contains all fields from [PlainTransaction](PlainTransaction.md), plus additional fields such as
`blockHeight` and `timestamp` if the transaction is included in the blockchain.

## Extends

* [`PlainTransaction`](PlainTransaction.md)

## Properties

### blockHeight?

> `optional` **blockHeight**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:329

***

### confirmations?

> `optional` **confirmations**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:330

***

### data

> **data**: [`PlainTransactionRecipientData`](../type-aliases/PlainTransactionRecipientData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:297

The `data` field of a transaction serves different purposes based on the transaction's recipient type.
For transactions to "basic" address types, this field can contain up to 64 bytes of unstructured data.
For transactions that create contracts or interact with the staking contract, the format of this field
must follow a fixed structure and defines the new contracts' properties or how the staking contract is
changed.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`data`](PlainTransaction.md#data)

***

### executionResult?

> `optional` **executionResult**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:328

***

### fee

> **fee**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:267

The transaction's fee in luna (NIM's smallest unit).

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`fee`](PlainTransaction.md#fee)

***

### feePerByte

> **feePerByte**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:271

The transaction's fee-per-byte in luna (NIM's smallest unit).

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`feePerByte`](PlainTransaction.md#feeperbyte)

***

### flags

> **flags**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:284

Any flags that this transaction carries. `0b1 = 1` means it's a contract-creation transaction, `0b10 = 2`
means it's a signalling transaction with 0 value.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`flags`](PlainTransaction.md#flags)

***

### format

> **format**: `PlainTransactionFormat`

Defined in: @nimiq/core/types/wasm/web.d.ts:244

The transaction's format. Nimiq transactions can have one of two formats: "basic" and "extended".
Basic transactions are simple value transfers between two regular address types and cannot contain
any extra data. Basic transactions can be serialized to less bytes, so take up less place on the
blockchain. Extended transactions on the other hand are all other transactions: contract creations
and interactions, staking transactions, transactions with exta data, etc.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`format`](PlainTransaction.md#format)

***

### network

> **network**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:279

The network name on which this transaction is valid.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`network`](PlainTransaction.md#network)

***

### proof

> **proof**: [`PlainTransactionProof`](../type-aliases/PlainTransactionProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:303

The `proof` field contains the signature of the eligible signer. The proof field's structure depends on
the transaction's sender type. For transactions from contracts it can also contain additional structured
data before the signature.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`proof`](PlainTransaction.md#proof)

***

### recipient

> **recipient**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:257

The transaction's recipient address in human-readable IBAN format.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`recipient`](PlainTransaction.md#recipient)

***

### recipientType

> **recipientType**: `PlainAccountType`

Defined in: @nimiq/core/types/wasm/web.d.ts:262

The account type of the transaction's recipient. "basic" are regular private-key controlled accounts,
"vesting" and "htlc" are contracts, and "staking" is the staking contract.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`recipientType`](PlainTransaction.md#recipienttype)

***

### sender

> **sender**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:248

The transaction's sender address in human-readable IBAN format.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`sender`](PlainTransaction.md#sender)

***

### senderData?

> `optional` **senderData**: [`PlainTransactionSenderData`](../type-aliases/PlainTransactionSenderData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:289

The `sender_data` field serves a purpose based on the transaction's sender type.
It is currently only used for extra information in transactions from the staking contract.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`senderData`](PlainTransaction.md#senderdata)

***

### senderType

> **senderType**: `PlainAccountType`

Defined in: @nimiq/core/types/wasm/web.d.ts:253

The account type of the transaction's sender. "basic" are regular private-key controlled accounts,
"vesting" and "htlc" are contracts, and "staking" is the staking contract.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`senderType`](PlainTransaction.md#sendertype)

***

### size

> **size**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:308

The transaction's serialized size in bytes. It is used to determine the fee-per-byte that this
transaction pays.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`size`](PlainTransaction.md#size)

***

### state

> **state**: [`TransactionState`](../type-aliases/TransactionState.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:327

***

### timestamp?

> `optional` **timestamp**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:331

***

### transactionHash

> **transactionHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:236

The transaction's unique hash, used as its identifier. Sometimes also called `txId`.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`transactionHash`](PlainTransaction.md#transactionhash)

***

### valid

> **valid**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:313

Encodes if the transaction is valid, meaning the signature is valid and the `data` and `proof` fields
follow the correct format for the transaction's recipient and sender type, respectively.

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`valid`](PlainTransaction.md#valid)

***

### validityStartHeight

> **validityStartHeight**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:275

The block height at which this transaction becomes valid. It is then valid for 7200 blocks (~2 hours).

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`validityStartHeight`](PlainTransaction.md#validitystartheight)

***

### value

> **value**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:263

#### Inherited from

[`PlainTransaction`](PlainTransaction.md).[`value`](PlainTransaction.md#value)

---

---
url: /build/web-client/reference/interfaces/PlainTransactionReceipt.md
---
[@nimiq/core](../globals.md) / PlainTransactionReceipt

# Interface: PlainTransactionReceipt

Defined in: @nimiq/core/types/wasm/web.d.ts:337

JSON-compatible and human-readable format of transaction receipts.

## Properties

### blockHeight

> **blockHeight**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:345

The transaction's block height where it is included in the blockchain.

***

### transactionHash

> **transactionHash**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:341

The transaction's unique hash, used as its identifier. Sometimes also called `txId`.

---

---
url: /build/web-client/reference/interfaces/PlainUpdateStakerData.md
---
[@nimiq/core](../globals.md) / PlainUpdateStakerData

# Interface: PlainUpdateStakerData

Defined in: @nimiq/core/types/wasm/web.d.ts:129

JSON-compatible and human-readable format of update staker data.

## Properties

### newDelegation

> **newDelegation**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:131

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:130

***

### reactivateAllStake

> **reactivateAllStake**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:132

---

---
url: /build/web-client/reference/interfaces/PlainUpdateValidatorData.md
---
[@nimiq/core](../globals.md) / PlainUpdateValidatorData

# Interface: PlainUpdateValidatorData

Defined in: @nimiq/core/types/wasm/web.d.ts:92

JSON-compatible and human-readable format of validator update data.

## Properties

### newProofOfKnowledge

> **newProofOfKnowledge**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:98

***

### newRewardAddress

> **newRewardAddress**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:96

***

### newSignalData

> **newSignalData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:97

***

### newSigningKey

> **newSigningKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:94

***

### newVotingKey

> **newVotingKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:95

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:93

---

---
url: /build/web-client/reference/interfaces/PlainValidator.md
---
[@nimiq/core](../globals.md) / PlainValidator

# Interface: PlainValidator

Defined in: @nimiq/core/types/wasm/web.d.ts:429

JSON-compatible and human-readable format of a validator. E.g. reward addresses and public keys are presented in
their human-readable format.

## Properties

### deposit

> **deposit**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:456

The amount of coins deposited by this validator. The initial deposit is a fixed amount,
however this value can be decremented by failing staking transactions due to fees.

***

### inactiveFrom

> **inactiveFrom**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:467

An option indicating if the validator is marked as inactive. If it is, then it contains the
block height at which it becomes inactive.
A validator can only effectively become inactive on the next election block. Thus, this may
contain a block height in the future.

***

### inactiveRelease

> **inactiveRelease**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:472

An option indicating if the validator is marked as inactive. If it is, then it contains the
block height at which the inactive stake gets released and the validator can be retired.

***

### jailedFrom

> **jailedFrom**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:483

An option indicating if the validator is jailed. If it is, then it contains the
block height at which it became jailed.
Opposed to `inactive_from`, jailing can and should take effect immediately to prevent
the validator and its stakers from modifying their funds and or delegation.

***

### jailedRelease

> **jailedRelease**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:488

An option indicating if the validator is jailed. If it is, then it contains the
block height at which the jail period ends and the validator becomes interactive again.

***

### numStakers

> **numStakers**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:460

The number of stakers that are delegating to this validator.

***

### retired

> **retired**: `boolean`

Defined in: @nimiq/core/types/wasm/web.d.ts:476

A flag indicating if the validator is retired.

***

### rewardAddress

> **rewardAddress**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:441

The reward address of the validator. All the block rewards are paid to this address.

***

### signalData

> **signalData**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:446

Signaling field. Can be used to do chain upgrades or for any other purpose that requires
validators to coordinate among themselves.

***

### signingPublicKey

> **signingPublicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:433

The public key used to sign blocks. It is also used to retire and reactivate the validator.

***

### totalStake

> **totalStake**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:451

The total stake assigned to this validator. It includes the validator deposit as well as the
coins delegated to him by stakers.

***

### votingPublicKey

> **votingPublicKey**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:437

The voting public key, it is used to vote for skip and macro blocks.

---

---
url: /build/web-client/reference/interfaces/PlainValidatorData.md
---
[@nimiq/core](../globals.md) / PlainValidatorData

# Interface: PlainValidatorData

Defined in: @nimiq/core/types/wasm/web.d.ts:105

JSON-compatible and human-readable format of validator deactivation/reactivation data.
Used for DeactivateValidator & ReactivateValidator, as they have the same fields.

## Properties

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:106

***

### validator

> **validator**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:107

---

---
url: /build/web-client/reference/interfaces/PlainVestingContract.md
---
[@nimiq/core](../globals.md) / PlainVestingContract

# Interface: PlainVestingContract

Defined in: @nimiq/core/types/wasm/web.d.ts:352

## Properties

### balance

> **balance**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:353

***

### owner

> **owner**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:354

***

### startTime

> **startTime**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:355

***

### stepAmount

> **stepAmount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:357

***

### timeStep

> **timeStep**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:356

***

### totalAmount

> **totalAmount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:358

---

---
url: /build/web-client/reference/interfaces/PlainVestingData.md
---
[@nimiq/core](../globals.md) / PlainVestingData

# Interface: PlainVestingData

Defined in: @nimiq/core/types/wasm/web.d.ts:56

JSON-compatible and human-readable format of vesting creation data.

## Properties

### owner

> **owner**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:58

***

### raw

> **raw**: `string`

Defined in: @nimiq/core/types/wasm/web.d.ts:57

***

### startTime

> **startTime**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:59

***

### stepAmount

> **stepAmount**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:61

***

### timeStep

> **timeStep**: `number`

Defined in: @nimiq/core/types/wasm/web.d.ts:60

---

---
url: /build/web-client/reference/@nimiq/namespaces/MnemonicUtils.md
---
[@nimiq/core](../../../globals.md) / MnemonicUtils

# MnemonicUtils

## Enumerations

* [MnemonicType](enumerations/MnemonicType.md)

---

---
url: /build/web-client/reference.md
---
# Nimiq Albatross Light Client

A very light Nimiq Proof-of-Stake client for browsers and NodeJS, compiled from Rust to WebAssembly.

> **Note**
> This light client is intended to be used in web browsers or NodeJS only (no WASI support either). Other webworker-enabled environments are not yet supported.

## 📦 Installation

You need to install this package from npm:

```sh
# Depending on your package manager:
npm install @nimiq/core
yarn add @nimiq/core
pnpm install @nimiq/core
```

## 🛠️ Usage

This package contains the WASM file bundled for three [targets](https://rustwasm.github.io/wasm-pack/book/commands/build.html#target): `bundler`, `web` and `node`.

### With Bundlers

If you use any bundler for your project, like Webpack or Vite, you should probably use the `bundler` target exported from the package root. If that doesn't work, or you require the `web` target for your use-case, jump to the [With ES Modules](#with-es-modules) section.

For detailed installation instructions for your bundler/framework, refer to the [Nimiq Developer Center](https://www.nimiq.com/developers/build/web-client/installation).

```js
// With Webpack: import the package asynchronously:
const Nimiq = await import('@nimiq/core');
// With Vite, import at the top of your file:
import * as Nimiq from '@nimiq/core';

// Create a configuration builder:
const config = new Nimiq.ClientConfiguration();

// Change the config, if necessary:
// --------------------------------
// Specify the network to use:
// Optional, default is 'mainalbatross'
config.network('testalbatross');
// Specify the seed nodes to initially connect to:
// Optional, default is the mainnet seed list
config.seedNodes(['/dns4/seed1.pos.nimiq-testnet.com/tcp/8443/wss']);
// Change the lowest log level that is output to the console:
// Optional, default is 'info'
config.logLevel('debug');

// Instantiate and launch the client:
const client = await Nimiq.Client.create(config.build());
```

### With ES Modules

```js
// Import the loader and package from the /web path:
import init, * as Nimiq from '@nimiq/core/web';

// Load and initialize the WASM file
init().then(() => {
    // Create a configuration builder:
    const config = new Nimiq.ClientConfiguration();

    // Change the config as shown above, if necessary
    // ...

    // Instantiate and launch the client:
    const client = await Nimiq.Client.create(config.build());
});
```

### NodeJS

For NodeJS, this package includes both CommonJS and ESM builds. You can either `require()` the package or `import` it.

```js
// Import as CommonJS module
const Nimiq = require("@nimiq/core");
// Or import as ESM module
import * as Nimiq from "@nimiq/core";

// In ESM modules you can use await at the top-level and do not need an async wrapper function.
async function main() {
    // Create a configuration builder:
    const config = new Nimiq.ClientConfiguration();

    // Change the config as shown above, if necessary
    // ...

    // Instantiate and launch the client:
    const client = await Nimiq.Client.create(config.build());
}
main();
```

## 🐛 Issues, Bugs and Feedback

If you encounter issues or you find a bug, please open an issue in our Github at https://github.com/nimiq/core-rs-albatross.

If you want to provide feedback or have questions about the client, our "Nimiq Coders Dojo" Telegram group and the [Community Forum](https://forum.nimiq.community/) are the right places for that.

---

---
url: /build/web-client/integrations/nuxt.md
---
# Nimiq Web Client in Nuxt

The Nimiq Web Client ships with support for Nuxt.

***

Update your `nuxt.config.js`:

```javascript
import topLevelAwait from 'vite-plugin-top-level-await' // [!code ++]
import wasm from 'vite-plugin-wasm' // [!code ++]

export default defineNuxtConfig({
  vite: { // [!code ++]
    plugins: [ // [!code ++]
      wasm(), // [!code ++]
      topLevelAwait(), // [!code ++]
    ], // [!code ++]
    worker: { // [!code ++]
      plugins: () => [ // [!code ++]
        wasm(), // [!code ++]
        topLevelAwait(), // [!code ++]
      ] // [!code ++]
    }, // [!code ++]

    optimizeDeps: { // [!code ++]
      exclude: ['@nimiq/core'], // [!code ++]
    }, // [!code ++]
  }, // [!code ++]

  // Only if you are using SSR or @nimiq/core in the server,
  // otherwise use `ssr: false` or `<ClientOnly />`
  // Check https://github.com/unjs/nitro/issues/1952 for more info
  nitro: { // [!code ++]
    experimental: { // [!code ++]
      wasm: true // [!code ++]
    }, // [!code ++]
  }, // [!code ++]
})
```

Now you are ready to go!

---

---
url: /build/web-client/integrations/vite.md
---
# Nimiq Web Client in Vite

The Nimiq Web Client ships with support for Vite.

***

Update your `vite.config.js`:

```javascript
import topLevelAwait from 'vite-plugin-top-level-await' // [!code ++]
import wasm from 'vite-plugin-wasm' // [!code ++]

export default defineConfig({
  plugins: [
    wasm(), // [!code ++]
    topLevelAwait(), // [!code ++]
  ],
  worker: { // [!code ++]
    plugins: () => [ // [!code ++]
      wasm(), // [!code ++]
      topLevelAwait(), // [!code ++]
    ] // [!code ++]
  }, // [!code ++]

  optimizeDeps: { // [!code ++]
    exclude: ['@nimiq/core'], // [!code ++]
  }, // [!code ++]
})
```

Now you are ready to go!

---

---
url: /build/web-client/integrations/webpack.md
---
# Nimiq Web Client in Webpack

The Nimiq Web Client ships with support for Webpack.

***

Update your `webpack.config.js` to enable the [`asyncWebAssembly`](https://webpack.js.org/configuration/experiments/#asyncWebAssembly) :

```javascript
module.exports = {
  experiments: { // [!code ++]
    asyncWebAssembly: true, // [!code ++]
  }, // [!code ++]
}
```

Now you are ready to go!

```js
const Nimiq = await import('@nimiq/core') // You need to use await import() to load the WebAssembly module

const config = new Nimiq.ClientConfiguration()
const client = await Nimiq.Client.create(config.build())

await client.waitForConsensusEstablished()
```

You need to use `await import()` to load the WebAssembly module and also experiment in your config.

---

---
url: /build/web-client/reference/@nimiq/namespaces/Secret.md
---
[@nimiq/core](../../../globals.md) / Secret

# Secret

## Enumerations

* [Type](enumerations/Type.md)

---

---
url: /build/web-client/reference/type-aliases/ConsensusState.md
---
[@nimiq/core](../globals.md) / ConsensusState

# Type Alias: ConsensusState

> **ConsensusState** = `"connecting"` | `"syncing"` | `"established"`

Defined in: @nimiq/core/types/wasm/web.d.ts:607

Describes the state of consensus of the client.

---

---
url: /build/web-client/reference/type-aliases/InitInput.md
---
[@nimiq/core](../globals.md) / InitInput

# Type Alias: InitInput

> **InitInput** = `RequestInfo` | `URL` | `Response` | `BufferSource` | `WebAssembly.Module`

Defined in: @nimiq/core/types/wasm/web.d.ts:2255

---

---
url: /build/web-client/reference/type-aliases/PlainAccount.md
---
[@nimiq/core](../globals.md) / PlainAccount

# Type Alias: PlainAccount

> **PlainAccount** = `object` & [`PlainBasicAccount`](../interfaces/PlainBasicAccount.md) | `object` & [`PlainVestingContract`](../interfaces/PlainVestingContract.md) | `object` & [`PlainHtlcContract`](../interfaces/PlainHtlcContract.md) | `object` & [`PlainStakingContract`](../interfaces/PlainStakingContract.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:379

---

---
url: /build/web-client/reference/type-aliases/PlainBlock.md
---
[@nimiq/core](../globals.md) / PlainBlock

# Type Alias: PlainBlock

> **PlainBlock** = `object` & [`PlainMacroBlock`](../interfaces/PlainMacroBlock.md) | `object` & [`PlainMicroBlock`](../interfaces/PlainMicroBlock.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:575

---

---
url: /build/web-client/reference/type-aliases/PlainService.md
---
[@nimiq/core](../globals.md) / PlainService

# Type Alias: PlainService

> **PlainService** = `"full-blocks"` | `"history"` | `"accounts-proof"` | `"accounts-chunk"` | `"mempool"` | `"transaction-index"` | `"validator"` | `"pre-genesis-transactions"` | `"unknown"`

Defined in: @nimiq/core/types/wasm/web.d.ts:602

Available peer service flags

---

---
url: /build/web-client/reference/type-aliases/PlainTransactionProof.md
---
[@nimiq/core](../globals.md) / PlainTransactionProof

# Type Alias: PlainTransactionProof

> **PlainTransactionProof** = `object` & [`PlainRawProof`](../interfaces/PlainRawProof.md) | `object` & [`PlainStandardProof`](../interfaces/PlainStandardProof.md) | `object` & [`PlainHtlcRegularTransferProof`](../interfaces/PlainHtlcRegularTransferProof.md) | `object` & [`PlainHtlcTimeoutResolveProof`](../interfaces/PlainHtlcTimeoutResolveProof.md) | `object` & [`PlainHtlcEarlyResolveProof`](../interfaces/PlainHtlcEarlyResolveProof.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:154

Enum over all possible meanings of a transaction's proof.

---

---
url: /build/web-client/reference/type-aliases/PlainTransactionRecipientData.md
---
[@nimiq/core](../globals.md) / PlainTransactionRecipientData

# Type Alias: PlainTransactionRecipientData

> **PlainTransactionRecipientData** = `object` & [`PlainRawData`](../interfaces/PlainRawData.md) | `object` & [`PlainVestingData`](../interfaces/PlainVestingData.md) | `object` & [`PlainHtlcData`](../interfaces/PlainHtlcData.md) | `object` & [`PlainCreateValidatorData`](../interfaces/PlainCreateValidatorData.md) | `object` & [`PlainUpdateValidatorData`](../interfaces/PlainUpdateValidatorData.md) | `object` & [`PlainValidatorData`](../interfaces/PlainValidatorData.md) | `object` & [`PlainValidatorData`](../interfaces/PlainValidatorData.md) | `object` & [`PlainRawData`](../interfaces/PlainRawData.md) | `object` & [`PlainCreateStakerData`](../interfaces/PlainCreateStakerData.md) | `object` & [`PlainAddStakeData`](../interfaces/PlainAddStakeData.md) | `object` & [`PlainUpdateStakerData`](../interfaces/PlainUpdateStakerData.md) | `object` & [`PlainSetActiveStakeData`](../interfaces/PlainSetActiveStakeData.md) | `object` & [`PlainRetireStakeData`](../interfaces/PlainRetireStakeData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:44

Enum over all possible meanings of a transaction's recipient data.

---

---
url: /build/web-client/reference/type-aliases/PlainTransactionSenderData.md
---
[@nimiq/core](../globals.md) / PlainTransactionSenderData

# Type Alias: PlainTransactionSenderData

> **PlainTransactionSenderData** = `object` & [`PlainRawData`](../interfaces/PlainRawData.md) | `object` & [`PlainRawData`](../interfaces/PlainRawData.md) | `object` & [`PlainRawData`](../interfaces/PlainRawData.md)

Defined in: @nimiq/core/types/wasm/web.d.ts:39

Enum over all possible meanings of a transaction's sender data.

---

---
url: /build/web-client/reference/type-aliases/SyncInitInput.md
---
[@nimiq/core](../globals.md) / SyncInitInput

# Type Alias: SyncInitInput

> **SyncInitInput** = `BufferSource` | `WebAssembly.Module`

Defined in: @nimiq/core/types/wasm/web.d.ts:2605

---

---
url: /build/web-client/reference/type-aliases/TransactionState.md
---
[@nimiq/core](../globals.md) / TransactionState

# Type Alias: TransactionState

> **TransactionState** = `"new"` | `"pending"` | `"included"` | `"confirmed"` | `"invalidated"` | `"expired"`

Defined in: @nimiq/core/types/wasm/web.d.ts:319

Describes the state of a transaction as known by the client.

---

---
url: /build/web-client/getting-started.md
---

# What's Nimiq?

Nimiq is an open source crypto designed for simplicity and ease of use. With our browser-first approach, Nimiq works directly within web browsers without the need for additional software, providing easy integration for developers and seamless interaction for users.

The protocol is based on the [Albatross consensus algorithm](/learn/), a proof-of-stake system renowned for its speed, security and low power consumption. Albatross supports high transaction throughput, and can handle thousands of transactions per second.

## The Nimiq Web Client

The Nimiq Web Client is a JavaScript library that allows you to be part of the Nimiq PoS blockchain directly in your browser. No intermediaries, no servers.

The Web Client provides a simple interface to build consensus with other nodes, create wallets, send transactions and interact with the blockchain.

Reaching consensus with the network is easy:

This is a simple example using `web` integration. For other environments, be sure to modify the import statement accordingly.

Then, you can start interacting with the blockchain:

```js
client.addHeadChangedListener((head) => {
  console.log('New head:', head)
})
```

## Using your private node

Although the Web Client already offers a lot of functionality, you can also set up your own private node for full control and advanced customisation. [Find out more about their differences](../web-client-rpc.md).

## Issues, bugs and feedback

This is an early version of the client code compiled to WebAssembly, and as such there might be issues and friction, especially now that more people are trying it in more environments than we could ever test ourselves.

If you encounter problems or find a bug, please open an issue in our [Github repository](https://github.com/nimiq/core-rs-albatross).

If you want to provide feedback or have questions about the client, our Nimiq Coders Dojo [Telegram](https://t.me/nimiq) and [Community Forum](https://forum.nimiq.community/) are the places to go.
